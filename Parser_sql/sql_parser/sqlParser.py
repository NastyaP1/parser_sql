# Generated from /Users/anastasiapereslavceva/parser_sql/Parser_sql/sql.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u009f")
        buf.write("\u052e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\3\2\7\2x\n\2\f\2\16\2{\13\2\3\2\3\2\3\3\7\3\u0080\n")
        buf.write("\3\f\3\16\3\u0083\13\3\3\3\3\3\6\3\u0087\n\3\r\3\16\3")
        buf.write("\u0088\3\3\7\3\u008c\n\3\f\3\16\3\u008f\13\3\3\3\7\3\u0092")
        buf.write("\n\3\f\3\16\3\u0095\13\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\5\4\u00a3\n\4\3\5\3\5\3\5\3\5\3\5\5")
        buf.write("\5\u00aa\n\5\3\5\3\5\5\5\u00ae\n\5\5\5\u00b0\n\5\3\6\3")
        buf.write("\6\5\6\u00b4\n\6\3\6\3\6\3\6\3\6\5\6\u00ba\n\6\3\6\3\6")
        buf.write("\3\6\5\6\u00bf\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\7\6\u00c8")
        buf.write("\n\6\f\6\16\6\u00cb\13\6\3\6\3\6\3\6\5\6\u00d0\n\6\3\7")
        buf.write("\3\7\5\7\u00d4\n\7\3\7\3\7\3\7\3\7\5\7\u00da\n\7\3\7\3")
        buf.write("\7\3\7\5\7\u00df\n\7\3\7\3\7\3\7\3\7\3\7\7\7\u00e6\n\7")
        buf.write("\f\7\16\7\u00e9\13\7\3\7\3\7\7\7\u00ed\n\7\f\7\16\7\u00f0")
        buf.write("\13\7\3\7\3\7\3\7\5\7\u00f5\n\7\3\7\3\7\5\7\u00f9\n\7")
        buf.write("\3\b\3\b\5\b\u00fd\n\b\3\b\3\b\3\b\7\b\u0102\n\b\f\b\16")
        buf.write("\b\u0105\13\b\3\b\3\b\5\b\u0109\n\b\3\b\3\b\5\b\u010d")
        buf.write("\n\b\3\t\3\t\5\t\u0111\n\t\3\n\3\n\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\5\13\u011b\n\13\3\13\3\13\3\13\5\13\u0120\n")
        buf.write("\13\3\13\3\13\3\13\3\13\5\13\u0126\n\13\3\13\3\13\3\13")
        buf.write("\3\13\7\13\u012c\n\13\f\13\16\13\u012f\13\13\3\f\3\f\5")
        buf.write("\f\u0133\n\f\3\f\3\f\3\f\5\f\u0138\n\f\3\f\3\f\5\f\u013c")
        buf.write("\n\f\3\f\5\f\u013f\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0151\n\f\3\f\3\f")
        buf.write("\3\f\5\f\u0156\n\f\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u015e\n")
        buf.write("\r\f\r\16\r\u0161\13\r\3\r\3\r\5\r\u0165\n\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0171\n\r\3\r\3\r\5")
        buf.write("\r\u0175\n\r\7\r\u0177\n\r\f\r\16\r\u017a\13\r\3\r\5\r")
        buf.write("\u017d\n\r\3\r\3\r\3\r\3\r\3\r\5\r\u0184\n\r\5\r\u0186")
        buf.write("\n\r\3\16\3\16\5\16\u018a\n\16\3\16\3\16\3\16\5\16\u018f")
        buf.write("\n\16\3\16\3\16\3\16\3\16\7\16\u0195\n\16\f\16\16\16\u0198")
        buf.write("\13\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\7\16\u01a8\n\16\f\16\16\16\u01ab")
        buf.write("\13\16\3\16\3\16\3\16\5\16\u01b0\n\16\3\17\3\17\5\17\u01b4")
        buf.write("\n\17\3\17\7\17\u01b7\n\17\f\17\16\17\u01ba\13\17\3\20")
        buf.write("\6\20\u01bd\n\20\r\20\16\20\u01be\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u01cb\n\20\3\21\3")
        buf.write("\21\3\21\5\21\u01d0\n\21\3\21\5\21\u01d3\n\21\3\22\5\22")
        buf.write("\u01d6\n\22\3\22\3\22\3\22\5\22\u01db\n\22\3\22\3\22\5")
        buf.write("\22\u01df\n\22\3\22\6\22\u01e2\n\22\r\22\16\22\u01e3\3")
        buf.write("\22\3\22\3\22\3\22\3\22\7\22\u01eb\n\22\f\22\16\22\u01ee")
        buf.write("\13\22\5\22\u01f0\n\22\3\22\3\22\3\22\3\22\5\22\u01f6")
        buf.write("\n\22\5\22\u01f8\n\22\3\23\5\23\u01fb\n\23\3\23\3\23\3")
        buf.write("\23\3\23\7\23\u0201\n\23\f\23\16\23\u0204\13\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\7\23\u020b\n\23\f\23\16\23\u020e\13")
        buf.write("\23\5\23\u0210\n\23\3\23\3\23\3\23\3\23\5\23\u0216\n\23")
        buf.write("\5\23\u0218\n\23\3\24\5\24\u021b\n\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\3\24\7\24\u0223\n\24\f\24\16\24\u0226\13\24\5")
        buf.write("\24\u0228\n\24\3\24\3\24\3\24\3\24\5\24\u022e\n\24\5\24")
        buf.write("\u0230\n\24\3\25\5\25\u0233\n\25\3\25\3\25\3\25\3\25\7")
        buf.write("\25\u0239\n\25\f\25\16\25\u023c\13\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\7\25\u0243\n\25\f\25\16\25\u0246\13\25\5\25\u0248")
        buf.write("\n\25\3\25\3\25\3\25\3\25\5\25\u024e\n\25\5\25\u0250\n")
        buf.write("\25\3\26\3\26\5\26\u0254\n\26\3\26\3\26\3\26\7\26\u0259")
        buf.write("\n\26\f\26\16\26\u025c\13\26\3\26\3\26\3\26\3\26\7\26")
        buf.write("\u0262\n\26\f\26\16\26\u0265\13\26\3\26\5\26\u0268\n\26")
        buf.write("\5\26\u026a\n\26\3\26\3\26\5\26\u026e\n\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\7\26\u0275\n\26\f\26\16\26\u0278\13\26\3")
        buf.write("\26\3\26\5\26\u027c\n\26\5\26\u027e\n\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\7\26\u0285\n\26\f\26\16\26\u0288\13\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\7\26\u0290\n\26\f\26\16\26\u0293")
        buf.write("\13\26\3\26\3\26\7\26\u0297\n\26\f\26\16\26\u029a\13\26")
        buf.write("\5\26\u029c\n\26\3\27\3\27\3\30\5\30\u02a1\n\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30")
        buf.write("\u02ae\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\7\30\u02ba\n\30\f\30\16\30\u02bd\13\30\3\30\3")
        buf.write("\30\5\30\u02c1\n\30\3\31\5\31\u02c4\n\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u02d1\n")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\7\31\u02dd\n\31\f\31\16\31\u02e0\13\31\3\31\3\31\5\31")
        buf.write("\u02e4\n\31\3\31\3\31\3\31\3\31\3\31\7\31\u02eb\n\31\f")
        buf.write("\31\16\31\u02ee\13\31\5\31\u02f0\n\31\3\31\3\31\3\31\3")
        buf.write("\31\5\31\u02f6\n\31\5\31\u02f8\n\31\3\32\5\32\u02fb\n")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u030e\n\32\3")
        buf.write("\32\3\32\3\32\3\32\5\32\u0314\n\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\7\32\u031b\n\32\f\32\16\32\u031e\13\32\3\32\3\32")
        buf.write("\5\32\u0322\n\32\3\32\3\32\3\32\3\32\3\32\7\32\u0329\n")
        buf.write("\32\f\32\16\32\u032c\13\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\7\32\u0334\n\32\f\32\16\32\u0337\13\32\3\32\3\32\7")
        buf.write("\32\u033b\n\32\f\32\16\32\u033e\13\32\3\32\3\32\3\32\5")
        buf.write("\32\u0343\n\32\3\33\3\33\3\33\3\33\5\33\u0349\n\33\3\33")
        buf.write("\3\33\3\33\5\33\u034e\n\33\3\33\3\33\3\34\3\34\3\34\3")
        buf.write("\34\5\34\u0356\n\34\3\34\3\34\3\34\5\34\u035b\n\34\3\34")
        buf.write("\3\34\3\35\5\35\u0360\n\35\3\35\3\35\3\35\3\35\3\35\5")
        buf.write("\35\u0367\n\35\3\36\5\36\u036a\n\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\5\36\u0371\n\36\3\36\3\36\3\36\3\36\3\36\7\36\u0378")
        buf.write("\n\36\f\36\16\36\u037b\13\36\5\36\u037d\n\36\3\36\3\36")
        buf.write("\3\36\3\36\5\36\u0383\n\36\5\36\u0385\n\36\3\37\3\37\3")
        buf.write("\37\5\37\u038a\n\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37")
        buf.write("\u0392\n\37\3 \3 \3 \3 \3 \3 \5 \u039a\n \3 \3 \3 \5 ")
        buf.write("\u039f\n \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u03aa\n \3 \5")
        buf.write(" \u03ad\n \3 \3 \3 \3 \3 \3 \5 \u03b5\n \3 \3 \3 \3 \3")
        buf.write(" \6 \u03bc\n \r \16 \u03bd\3 \3 \5 \u03c2\n \3 \3 \5 ")
        buf.write("\u03c6\n \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u03e3\n \3 \3")
        buf.write(" \3 \5 \u03e8\n \3 \3 \3 \3 \3 \3 \3 \5 \u03f1\n \3 \3")
        buf.write(" \3 \3 \3 \3 \7 \u03f9\n \f \16 \u03fc\13 \5 \u03fe\n")
        buf.write(" \3 \3 \3 \3 \5 \u0404\n \3 \5 \u0407\n \3 \3 \3 \3 \3")
        buf.write(" \5 \u040e\n \3 \3 \3 \3 \5 \u0414\n \3 \3 \3 \3 \3 \5")
        buf.write(" \u041b\n \7 \u041d\n \f \16 \u0420\13 \3!\3!\5!\u0424")
        buf.write("\n!\3!\3!\3!\7!\u0429\n!\f!\16!\u042c\13!\3\"\3\"\3\"")
        buf.write("\3\"\3\"\7\"\u0433\n\"\f\"\16\"\u0436\13\"\3\"\3\"\5\"")
        buf.write("\u043a\n\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\5#\u0444\n#\3")
        buf.write("#\5#\u0447\n#\3$\3$\3$\3$\3$\3$\3$\5$\u0450\n$\3$\5$\u0453")
        buf.write("\n$\5$\u0455\n$\3%\3%\3%\5%\u045a\n%\3%\3%\5%\u045e\n")
        buf.write("%\3%\5%\u0461\n%\3%\3%\3%\3%\3%\5%\u0468\n%\3%\3%\3%\5")
        buf.write("%\u046d\n%\3%\3%\3%\3%\3%\7%\u0474\n%\f%\16%\u0477\13")
        buf.write("%\5%\u0479\n%\3%\3%\5%\u047d\n%\3%\5%\u0480\n%\3%\3%\3")
        buf.write("%\3%\7%\u0486\n%\f%\16%\u0489\13%\3%\5%\u048c\n%\3%\3")
        buf.write("%\3%\3%\3%\3%\5%\u0494\n%\3%\5%\u0497\n%\5%\u0499\n%\3")
        buf.write("&\3&\3&\3&\3&\7&\u04a0\n&\f&\16&\u04a3\13&\3\'\3\'\5\'")
        buf.write("\u04a7\n\'\3\'\3\'\5\'\u04ab\n\'\3\'\3\'\5\'\u04af\n\'")
        buf.write("\3\'\5\'\u04b2\n\'\3(\3(\3(\3(\3(\3(\3(\7(\u04bb\n(\f")
        buf.write("(\16(\u04be\13(\3(\3(\5(\u04c2\n(\3)\3)\5)\u04c6\n)\3")
        buf.write(")\3)\3)\7)\u04cb\n)\f)\16)\u04ce\13)\3)\3)\3)\3)\7)\u04d4")
        buf.write("\n)\f)\16)\u04d7\13)\3)\5)\u04da\n)\5)\u04dc\n)\3)\3)")
        buf.write("\5)\u04e0\n)\3)\3)\3)\3)\3)\7)\u04e7\n)\f)\16)\u04ea\13")
        buf.write(")\3)\3)\5)\u04ee\n)\5)\u04f0\n)\3*\3*\3*\5*\u04f5\n*\3")
        buf.write("+\3+\3+\3+\3+\5+\u04fc\n+\3,\3,\3-\5-\u0501\n-\3-\3-\3")
        buf.write(".\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62\3\63\3\63\3\64")
        buf.write("\3\64\3\65\3\65\3\66\3\66\3\67\3\67\38\38\39\39\3:\3:")
        buf.write("\3:\3:\3:\3:\5:\u0523\n:\3;\3;\3;\3;\3;\3;\3;\5;\u052c")
        buf.write("\n;\3;\4\u00e7\u01be\4\24><\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\")
        buf.write("^`bdfhjlnprt\2\23\3\2\u0085\u0086\4\2\37\37@@\5\2\b\b")
        buf.write("\24\27\31\31\4\2$$>>\4\2==\u008d\u008d\4\2\7\7ll\4\2\t")
        buf.write("\t\16\17\3\2\n\13\3\2\20\23\3\2\24\27\4\2\b\b\30\32\6")
        buf.write("\2OOcceexx\7\2\33\33JJSS||\177\177\6\2\668jj\u0098\u0098")
        buf.write("\u009a\u009b\4\2\n\fhh\4\2\u0097\u0097\u009a\u009a\3\2")
        buf.write("\33\u0096\2\u05fb\2y\3\2\2\2\4\u0081\3\2\2\2\6\u00a2\3")
        buf.write("\2\2\2\b\u00a4\3\2\2\2\n\u00b1\3\2\2\2\f\u00d1\3\2\2\2")
        buf.write("\16\u00fa\3\2\2\2\20\u0110\3\2\2\2\22\u0112\3\2\2\2\24")
        buf.write("\u0125\3\2\2\2\26\u0132\3\2\2\2\30\u0157\3\2\2\2\32\u0189")
        buf.write("\3\2\2\2\34\u01b1\3\2\2\2\36\u01bc\3\2\2\2 \u01cc\3\2")
        buf.write("\2\2\"\u01d5\3\2\2\2$\u01fa\3\2\2\2&\u021a\3\2\2\2(\u0232")
        buf.write("\3\2\2\2*\u029b\3\2\2\2,\u029d\3\2\2\2.\u02a0\3\2\2\2")
        buf.write("\60\u02c3\3\2\2\2\62\u02fa\3\2\2\2\64\u0344\3\2\2\2\66")
        buf.write("\u0351\3\2\2\28\u035f\3\2\2\2:\u0369\3\2\2\2<\u0389\3")
        buf.write("\2\2\2>\u03c5\3\2\2\2@\u0421\3\2\2\2B\u042d\3\2\2\2D\u0440")
        buf.write("\3\2\2\2F\u0454\3\2\2\2H\u0498\3\2\2\2J\u049a\3\2\2\2")
        buf.write("L\u04b1\3\2\2\2N\u04c1\3\2\2\2P\u04c3\3\2\2\2R\u04f4\3")
        buf.write("\2\2\2T\u04fb\3\2\2\2V\u04fd\3\2\2\2X\u0500\3\2\2\2Z\u0504")
        buf.write("\3\2\2\2\\\u0506\3\2\2\2^\u0508\3\2\2\2`\u050a\3\2\2\2")
        buf.write("b\u050c\3\2\2\2d\u050e\3\2\2\2f\u0510\3\2\2\2h\u0512\3")
        buf.write("\2\2\2j\u0514\3\2\2\2l\u0516\3\2\2\2n\u0518\3\2\2\2p\u051a")
        buf.write("\3\2\2\2r\u0522\3\2\2\2t\u052b\3\2\2\2vx\5\4\3\2wv\3\2")
        buf.write("\2\2x{\3\2\2\2yw\3\2\2\2yz\3\2\2\2z|\3\2\2\2{y\3\2\2\2")
        buf.write("|}\7\2\2\3}\3\3\2\2\2~\u0080\7\3\2\2\177~\3\2\2\2\u0080")
        buf.write("\u0083\3\2\2\2\u0081\177\3\2\2\2\u0081\u0082\3\2\2\2\u0082")
        buf.write("\u0084\3\2\2\2\u0083\u0081\3\2\2\2\u0084\u008d\5\6\4\2")
        buf.write("\u0085\u0087\7\3\2\2\u0086\u0085\3\2\2\2\u0087\u0088\3")
        buf.write("\2\2\2\u0088\u0086\3\2\2\2\u0088\u0089\3\2\2\2\u0089\u008a")
        buf.write("\3\2\2\2\u008a\u008c\5\6\4\2\u008b\u0086\3\2\2\2\u008c")
        buf.write("\u008f\3\2\2\2\u008d\u008b\3\2\2\2\u008d\u008e\3\2\2\2")
        buf.write("\u008e\u0093\3\2\2\2\u008f\u008d\3\2\2\2\u0090\u0092\7")
        buf.write("\3\2\2\u0091\u0090\3\2\2\2\u0092\u0095\3\2\2\2\u0093\u0091")
        buf.write("\3\2\2\2\u0093\u0094\3\2\2\2\u0094\5\3\2\2\2\u0095\u0093")
        buf.write("\3\2\2\2\u0096\u00a3\5,\27\2\u0097\u00a3\5\n\6\2\u0098")
        buf.write("\u00a3\5\f\7\2\u0099\u00a3\5\b\5\2\u009a\u00a3\5.\30\2")
        buf.write("\u009b\u00a3\5\60\31\2\u009c\u00a3\5\62\32\2\u009d\u00a3")
        buf.write("\5\16\b\2\u009e\u00a3\5\64\33\2\u009f\u00a3\5\66\34\2")
        buf.write("\u00a0\u00a3\58\35\2\u00a1\u00a3\5:\36\2\u00a2\u0096\3")
        buf.write("\2\2\2\u00a2\u0097\3\2\2\2\u00a2\u0098\3\2\2\2\u00a2\u0099")
        buf.write("\3\2\2\2\u00a2\u009a\3\2\2\2\u00a2\u009b\3\2\2\2\u00a2")
        buf.write("\u009c\3\2\2\2\u00a2\u009d\3\2\2\2\u00a2\u009e\3\2\2\2")
        buf.write("\u00a2\u009f\3\2\2\2\u00a2\u00a0\3\2\2\2\u00a2\u00a1\3")
        buf.write("\2\2\2\u00a3\7\3\2\2\2\u00a4\u00af\7y\2\2\u00a5\u00b0")
        buf.write("\5n8\2\u00a6\u00a7\5d\63\2\u00a7\u00a8\7\4\2\2\u00a8\u00aa")
        buf.write("\3\2\2\2\u00a9\u00a6\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa")
        buf.write("\u00ad\3\2\2\2\u00ab\u00ae\5j\66\2\u00ac\u00ae\5p9\2\u00ad")
        buf.write("\u00ab\3\2\2\2\u00ad\u00ac\3\2\2\2\u00ae\u00b0\3\2\2\2")
        buf.write("\u00af\u00a5\3\2\2\2\u00af\u00a9\3\2\2\2\u00af\u00b0\3")
        buf.write("\2\2\2\u00b0\t\3\2\2\2\u00b1\u00b3\7\64\2\2\u00b2\u00b4")
        buf.write("\7\u008c\2\2\u00b3\u00b2\3\2\2\2\u00b3\u00b4\3\2\2\2\u00b4")
        buf.write("\u00b5\3\2\2\2\u00b5\u00b9\7V\2\2\u00b6\u00b7\7R\2\2\u00b7")
        buf.write("\u00b8\7h\2\2\u00b8\u00ba\7H\2\2\u00b9\u00b6\3\2\2\2\u00b9")
        buf.write("\u00ba\3\2\2\2\u00ba\u00be\3\2\2\2\u00bb\u00bc\5d\63\2")
        buf.write("\u00bc\u00bd\7\4\2\2\u00bd\u00bf\3\2\2\2\u00be\u00bb\3")
        buf.write("\2\2\2\u00be\u00bf\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00c1")
        buf.write("\5p9\2\u00c1\u00c2\7m\2\2\u00c2\u00c3\5j\66\2\u00c3\u00c4")
        buf.write("\7\5\2\2\u00c4\u00c9\5 \21\2\u00c5\u00c6\7\7\2\2\u00c6")
        buf.write("\u00c8\5 \21\2\u00c7\u00c5\3\2\2\2\u00c8\u00cb\3\2\2\2")
        buf.write("\u00c9\u00c7\3\2\2\2\u00c9\u00ca\3\2\2\2\u00ca\u00cc\3")
        buf.write("\2\2\2\u00cb\u00c9\3\2\2\2\u00cc\u00cf\7\6\2\2\u00cd\u00ce")
        buf.write("\7\u0094\2\2\u00ce\u00d0\5> \2\u00cf\u00cd\3\2\2\2\u00cf")
        buf.write("\u00d0\3\2\2\2\u00d0\13\3\2\2\2\u00d1\u00d3\7\64\2\2\u00d2")
        buf.write("\u00d4\t\2\2\2\u00d3\u00d2\3\2\2\2\u00d3\u00d4\3\2\2\2")
        buf.write("\u00d4\u00d5\3\2\2\2\u00d5\u00d9\7\u0084\2\2\u00d6\u00d7")
        buf.write("\7R\2\2\u00d7\u00d8\7h\2\2\u00d8\u00da\7H\2\2\u00d9\u00d6")
        buf.write("\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00de\3\2\2\2\u00db")
        buf.write("\u00dc\5d\63\2\u00dc\u00dd\7\4\2\2\u00dd\u00df\3\2\2\2")
        buf.write("\u00de\u00db\3\2\2\2\u00de\u00df\3\2\2\2\u00df\u00e0\3")
        buf.write("\2\2\2\u00e0\u00f8\5j\66\2\u00e1\u00e2\7\5\2\2\u00e2\u00e7")
        buf.write("\5\34\17\2\u00e3\u00e4\7\7\2\2\u00e4\u00e6\5\34\17\2\u00e5")
        buf.write("\u00e3\3\2\2\2\u00e6\u00e9\3\2\2\2\u00e7\u00e8\3\2\2\2")
        buf.write("\u00e7\u00e5\3\2\2\2\u00e8\u00ee\3\2\2\2\u00e9\u00e7\3")
        buf.write("\2\2\2\u00ea\u00eb\7\7\2\2\u00eb\u00ed\5\32\16\2\u00ec")
        buf.write("\u00ea\3\2\2\2\u00ed\u00f0\3\2\2\2\u00ee\u00ec\3\2\2\2")
        buf.write("\u00ee\u00ef\3\2\2\2\u00ef\u00f1\3\2\2\2\u00f0\u00ee\3")
        buf.write("\2\2\2\u00f1\u00f4\7\6\2\2\u00f2\u00f3\7\u0096\2\2\u00f3")
        buf.write("\u00f5\7\u0097\2\2\u00f4\u00f2\3\2\2\2\u00f4\u00f5\3\2")
        buf.write("\2\2\u00f5\u00f9\3\2\2\2\u00f6\u00f7\7#\2\2\u00f7\u00f9")
        buf.write("\5(\25\2\u00f8\u00e1\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f9")
        buf.write("\r\3\2\2\2\u00fa\u00fc\7\u0082\2\2\u00fb\u00fd\t\3\2\2")
        buf.write("\u00fc\u00fb\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00fe\3")
        buf.write("\2\2\2\u00fe\u0103\5\20\t\2\u00ff\u0100\7\7\2\2\u0100")
        buf.write("\u0102\5\20\t\2\u0101\u00ff\3\2\2\2\u0102\u0105\3\2\2")
        buf.write("\2\u0103\u0101\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0108")
        buf.write("\3\2\2\2\u0105\u0103\3\2\2\2\u0106\u0107\7M\2\2\u0107")
        buf.write("\u0109\5j\66\2\u0108\u0106\3\2\2\2\u0108\u0109\3\2\2\2")
        buf.write("\u0109\u010c\3\2\2\2\u010a\u010b\7\u0094\2\2\u010b\u010d")
        buf.write("\5\24\13\2\u010c\u010a\3\2\2\2\u010c\u010d\3\2\2\2\u010d")
        buf.write("\17\3\2\2\2\u010e\u0111\7\t\2\2\u010f\u0111\5> \2\u0110")
        buf.write("\u010e\3\2\2\2\u0110\u010f\3\2\2\2\u0111\21\3\2\2\2\u0112")
        buf.write("\u0113\t\4\2\2\u0113\23\3\2\2\2\u0114\u0115\b\13\1\2\u0115")
        buf.write("\u0126\5Z.\2\u0116\u0126\7\u0099\2\2\u0117\u0118\5d\63")
        buf.write("\2\u0118\u0119\7\4\2\2\u0119\u011b\3\2\2\2\u011a\u0117")
        buf.write("\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u011c\3\2\2\2\u011c")
        buf.write("\u011d\5j\66\2\u011d\u011e\7\4\2\2\u011e\u0120\3\2\2\2")
        buf.write("\u011f\u011a\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0121\3")
        buf.write("\2\2\2\u0121\u0126\5l\67\2\u0122\u0123\5\22\n\2\u0123")
        buf.write("\u0124\5\24\13\4\u0124\u0126\3\2\2\2\u0125\u0114\3\2\2")
        buf.write("\2\u0125\u0116\3\2\2\2\u0125\u011f\3\2\2\2\u0125\u0122")
        buf.write("\3\2\2\2\u0126\u012d\3\2\2\2\u0127\u0128\f\3\2\2\u0128")
        buf.write("\u0129\5\22\n\2\u0129\u012a\5\24\13\4\u012a\u012c\3\2")
        buf.write("\2\2\u012b\u0127\3\2\2\2\u012c\u012f\3\2\2\2\u012d\u012b")
        buf.write("\3\2\2\2\u012d\u012e\3\2\2\2\u012e\25\3\2\2\2\u012f\u012d")
        buf.write("\3\2\2\2\u0130\u0131\7\63\2\2\u0131\u0133\5b\62\2\u0132")
        buf.write("\u0130\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0155\3\2\2\2")
        buf.write("\u0134\u0135\7s\2\2\u0135\u0137\7a\2\2\u0136\u0138\t\5")
        buf.write("\2\2\u0137\u0136\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u0139")
        buf.write("\3\2\2\2\u0139\u013b\5R*\2\u013a\u013c\7&\2\2\u013b\u013a")
        buf.write("\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u0156\3\2\2\2\u013d")
        buf.write("\u013f\7h\2\2\u013e\u013d\3\2\2\2\u013e\u013f\3\2\2\2")
        buf.write("\u013f\u0140\3\2\2\2\u0140\u0141\7j\2\2\u0141\u0156\5")
        buf.write("R*\2\u0142\u0143\7\u008c\2\2\u0143\u0156\5R*\2\u0144\u0145")
        buf.write("\7.\2\2\u0145\u0146\7\5\2\2\u0146\u0147\5> \2\u0147\u0148")
        buf.write("\7\6\2\2\u0148\u0156\3\2\2\2\u0149\u0150\7:\2\2\u014a")
        buf.write("\u0151\5X-\2\u014b\u0151\5Z.\2\u014c\u014d\7\5\2\2\u014d")
        buf.write("\u014e\5> \2\u014e\u014f\7\6\2\2\u014f\u0151\3\2\2\2\u0150")
        buf.write("\u014a\3\2\2\2\u0150\u014b\3\2\2\2\u0150\u014c\3\2\2\2")
        buf.write("\u0151\u0156\3\2\2\2\u0152\u0153\7/\2\2\u0153\u0156\5")
        buf.write("n8\2\u0154\u0156\5\30\r\2\u0155\u0134\3\2\2\2\u0155\u013e")
        buf.write("\3\2\2\2\u0155\u0142\3\2\2\2\u0155\u0144\3\2\2\2\u0155")
        buf.write("\u0149\3\2\2\2\u0155\u0152\3\2\2\2\u0155\u0154\3\2\2\2")
        buf.write("\u0156\27\3\2\2\2\u0157\u0158\7w\2\2\u0158\u0164\5V,\2")
        buf.write("\u0159\u015a\7\5\2\2\u015a\u015f\5l\67\2\u015b\u015c\7")
        buf.write("\7\2\2\u015c\u015e\5l\67\2\u015d\u015b\3\2\2\2\u015e\u0161")
        buf.write("\3\2\2\2\u015f\u015d\3\2\2\2\u015f\u0160\3\2\2\2\u0160")
        buf.write("\u0162\3\2\2\2\u0161\u015f\3\2\2\2\u0162\u0163\7\6\2\2")
        buf.write("\u0163\u0165\3\2\2\2\u0164\u0159\3\2\2\2\u0164\u0165\3")
        buf.write("\2\2\2\u0165\u0178\3\2\2\2\u0166\u0167\7m\2\2\u0167\u0170")
        buf.write("\t\6\2\2\u0168\u0169\7\u0083\2\2\u0169\u0171\7j\2\2\u016a")
        buf.write("\u016b\7\u0083\2\2\u016b\u0171\7:\2\2\u016c\u0171\7+\2")
        buf.write("\2\u016d\u0171\7}\2\2\u016e\u016f\7g\2\2\u016f\u0171\7")
        buf.write("\34\2\2\u0170\u0168\3\2\2\2\u0170\u016a\3\2\2\2\u0170")
        buf.write("\u016c\3\2\2\2\u0170\u016d\3\2\2\2\u0170\u016e\3\2\2\2")
        buf.write("\u0171\u0175\3\2\2\2\u0172\u0173\7e\2\2\u0173\u0175\5")
        buf.write("b\62\2\u0174\u0166\3\2\2\2\u0174\u0172\3\2\2\2\u0175\u0177")
        buf.write("\3\2\2\2\u0176\u0174\3\2\2\2\u0177\u017a\3\2\2\2\u0178")
        buf.write("\u0176\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u0185\3\2\2\2")
        buf.write("\u017a\u0178\3\2\2\2\u017b\u017d\7h\2\2\u017c\u017b\3")
        buf.write("\2\2\2\u017c\u017d\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u0183")
        buf.write("\7;\2\2\u017f\u0180\7X\2\2\u0180\u0184\7<\2\2\u0181\u0182")
        buf.write("\7X\2\2\u0182\u0184\7T\2\2\u0183\u017f\3\2\2\2\u0183\u0181")
        buf.write("\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0186\3\2\2\2\u0185")
        buf.write("\u017c\3\2\2\2\u0185\u0186\3\2\2\2\u0186\31\3\2\2\2\u0187")
        buf.write("\u0188\7\63\2\2\u0188\u018a\5b\62\2\u0189\u0187\3\2\2")
        buf.write("\2\u0189\u018a\3\2\2\2\u018a\u01af\3\2\2\2\u018b\u018c")
        buf.write("\7s\2\2\u018c\u018f\7a\2\2\u018d\u018f\7\u008c\2\2\u018e")
        buf.write("\u018b\3\2\2\2\u018e\u018d\3\2\2\2\u018f\u0190\3\2\2\2")
        buf.write("\u0190\u0191\7\5\2\2\u0191\u0196\5 \21\2\u0192\u0193\7")
        buf.write("\7\2\2\u0193\u0195\5 \21\2\u0194\u0192\3\2\2\2\u0195\u0198")
        buf.write("\3\2\2\2\u0196\u0194\3\2\2\2\u0196\u0197\3\2\2\2\u0197")
        buf.write("\u0199\3\2\2\2\u0198\u0196\3\2\2\2\u0199\u019a\7\6\2\2")
        buf.write("\u019a\u019b\5R*\2\u019b\u01b0\3\2\2\2\u019c\u019d\7.")
        buf.write("\2\2\u019d\u019e\7\5\2\2\u019e\u019f\5> \2\u019f\u01a0")
        buf.write("\7\6\2\2\u01a0\u01b0\3\2\2\2\u01a1\u01a2\7L\2\2\u01a2")
        buf.write("\u01a3\7a\2\2\u01a3\u01a4\7\5\2\2\u01a4\u01a9\5l\67\2")
        buf.write("\u01a5\u01a6\7\7\2\2\u01a6\u01a8\5l\67\2\u01a7\u01a5\3")
        buf.write("\2\2\2\u01a8\u01ab\3\2\2\2\u01a9\u01a7\3\2\2\2\u01a9\u01aa")
        buf.write("\3\2\2\2\u01aa\u01ac\3\2\2\2\u01ab\u01a9\3\2\2\2\u01ac")
        buf.write("\u01ad\7\6\2\2\u01ad\u01ae\5\30\r\2\u01ae\u01b0\3\2\2")
        buf.write("\2\u01af\u018e\3\2\2\2\u01af\u019c\3\2\2\2\u01af\u01a1")
        buf.write("\3\2\2\2\u01b0\33\3\2\2\2\u01b1\u01b3\5l\67\2\u01b2\u01b4")
        buf.write("\5\36\20\2\u01b3\u01b2\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4")
        buf.write("\u01b8\3\2\2\2\u01b5\u01b7\5\26\f\2\u01b6\u01b5\3\2\2")
        buf.write("\2\u01b7\u01ba\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b8\u01b9")
        buf.write("\3\2\2\2\u01b9\35\3\2\2\2\u01ba\u01b8\3\2\2\2\u01bb\u01bd")
        buf.write("\5b\62\2\u01bc\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2\u01be")
        buf.write("\u01bf\3\2\2\2\u01be\u01bc\3\2\2\2\u01bf\u01ca\3\2\2\2")
        buf.write("\u01c0\u01c1\7\5\2\2\u01c1\u01c2\5X-\2\u01c2\u01c3\7\6")
        buf.write("\2\2\u01c3\u01cb\3\2\2\2\u01c4\u01c5\7\5\2\2\u01c5\u01c6")
        buf.write("\5X-\2\u01c6\u01c7\7\7\2\2\u01c7\u01c8\5X-\2\u01c8\u01c9")
        buf.write("\7\6\2\2\u01c9\u01cb\3\2\2\2\u01ca\u01c0\3\2\2\2\u01ca")
        buf.write("\u01c4\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb\37\3\2\2\2\u01cc")
        buf.write("\u01cf\5l\67\2\u01cd\u01ce\7/\2\2\u01ce\u01d0\5n8\2\u01cf")
        buf.write("\u01cd\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d2\3\2\2\2")
        buf.write("\u01d1\u01d3\t\5\2\2\u01d2\u01d1\3\2\2\2\u01d2\u01d3\3")
        buf.write("\2\2\2\u01d3!\3\2\2\2\u01d4\u01d6\5@!\2\u01d5\u01d4\3")
        buf.write("\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01e1")
        buf.write("\5P)\2\u01d8\u01da\7\u008b\2\2\u01d9\u01db\7\37\2\2\u01da")
        buf.write("\u01d9\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01df\3\2\2\2")
        buf.write("\u01dc\u01df\7\\\2\2\u01dd\u01df\7F\2\2\u01de\u01d8\3")
        buf.write("\2\2\2\u01de\u01dc\3\2\2\2\u01de\u01dd\3\2\2\2\u01df\u01e0")
        buf.write("\3\2\2\2\u01e0\u01e2\5P)\2\u01e1\u01de\3\2\2\2\u01e2\u01e3")
        buf.write("\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4")
        buf.write("\u01ef\3\2\2\2\u01e5\u01e6\7o\2\2\u01e6\u01e7\7*\2\2\u01e7")
        buf.write("\u01ec\5D#\2\u01e8\u01e9\7\7\2\2\u01e9\u01eb\5D#\2\u01ea")
        buf.write("\u01e8\3\2\2\2\u01eb\u01ee\3\2\2\2\u01ec\u01ea\3\2\2\2")
        buf.write("\u01ec\u01ed\3\2\2\2\u01ed\u01f0\3\2\2\2\u01ee\u01ec\3")
        buf.write("\2\2\2\u01ef\u01e5\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f7")
        buf.write("\3\2\2\2\u01f1\u01f2\7d\2\2\u01f2\u01f5\5> \2\u01f3\u01f4")
        buf.write("\t\7\2\2\u01f4\u01f6\5> \2\u01f5\u01f3\3\2\2\2\u01f5\u01f6")
        buf.write("\3\2\2\2\u01f6\u01f8\3\2\2\2\u01f7\u01f1\3\2\2\2\u01f7")
        buf.write("\u01f8\3\2\2\2\u01f8#\3\2\2\2\u01f9\u01fb\5@!\2\u01fa")
        buf.write("\u01f9\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fc\3\2\2\2")
        buf.write("\u01fc\u0202\5P)\2\u01fd\u01fe\5T+\2\u01fe\u01ff\5P)\2")
        buf.write("\u01ff\u0201\3\2\2\2\u0200\u01fd\3\2\2\2\u0201\u0204\3")
        buf.write("\2\2\2\u0202\u0200\3\2\2\2\u0202\u0203\3\2\2\2\u0203\u020f")
        buf.write("\3\2\2\2\u0204\u0202\3\2\2\2\u0205\u0206\7o\2\2\u0206")
        buf.write("\u0207\7*\2\2\u0207\u020c\5D#\2\u0208\u0209\7\7\2\2\u0209")
        buf.write("\u020b\5D#\2\u020a\u0208\3\2\2\2\u020b\u020e\3\2\2\2\u020c")
        buf.write("\u020a\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u0210\3\2\2\2")
        buf.write("\u020e\u020c\3\2\2\2\u020f\u0205\3\2\2\2\u020f\u0210\3")
        buf.write("\2\2\2\u0210\u0217\3\2\2\2\u0211\u0212\7d\2\2\u0212\u0215")
        buf.write("\5> \2\u0213\u0214\t\7\2\2\u0214\u0216\5> \2\u0215\u0213")
        buf.write("\3\2\2\2\u0215\u0216\3\2\2\2\u0216\u0218\3\2\2\2\u0217")
        buf.write("\u0211\3\2\2\2\u0217\u0218\3\2\2\2\u0218%\3\2\2\2\u0219")
        buf.write("\u021b\5@!\2\u021a\u0219\3\2\2\2\u021a\u021b\3\2\2\2\u021b")
        buf.write("\u021c\3\2\2\2\u021c\u0227\5P)\2\u021d\u021e\7o\2\2\u021e")
        buf.write("\u021f\7*\2\2\u021f\u0224\5D#\2\u0220\u0221\7\7\2\2\u0221")
        buf.write("\u0223\5D#\2\u0222\u0220\3\2\2\2\u0223\u0226\3\2\2\2\u0224")
        buf.write("\u0222\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0228\3\2\2\2")
        buf.write("\u0226\u0224\3\2\2\2\u0227\u021d\3\2\2\2\u0227\u0228\3")
        buf.write("\2\2\2\u0228\u022f\3\2\2\2\u0229\u022a\7d\2\2\u022a\u022d")
        buf.write("\5> \2\u022b\u022c\t\7\2\2\u022c\u022e\5> \2\u022d\u022b")
        buf.write("\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u0230\3\2\2\2\u022f")
        buf.write("\u0229\3\2\2\2\u022f\u0230\3\2\2\2\u0230\'\3\2\2\2\u0231")
        buf.write("\u0233\5@!\2\u0232\u0231\3\2\2\2\u0232\u0233\3\2\2\2\u0233")
        buf.write("\u0234\3\2\2\2\u0234\u023a\5*\26\2\u0235\u0236\5T+\2\u0236")
        buf.write("\u0237\5*\26\2\u0237\u0239\3\2\2\2\u0238\u0235\3\2\2\2")
        buf.write("\u0239\u023c\3\2\2\2\u023a\u0238\3\2\2\2\u023a\u023b\3")
        buf.write("\2\2\2\u023b\u0247\3\2\2\2\u023c\u023a\3\2\2\2\u023d\u023e")
        buf.write("\7o\2\2\u023e\u023f\7*\2\2\u023f\u0244\5D#\2\u0240\u0241")
        buf.write("\7\7\2\2\u0241\u0243\5D#\2\u0242\u0240\3\2\2\2\u0243\u0246")
        buf.write("\3\2\2\2\u0244\u0242\3\2\2\2\u0244\u0245\3\2\2\2\u0245")
        buf.write("\u0248\3\2\2\2\u0246\u0244\3\2\2\2\u0247\u023d\3\2\2\2")
        buf.write("\u0247\u0248\3\2\2\2\u0248\u024f\3\2\2\2\u0249\u024a\7")
        buf.write("d\2\2\u024a\u024d\5> \2\u024b\u024c\t\7\2\2\u024c\u024e")
        buf.write("\5> \2\u024d\u024b\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u0250")
        buf.write("\3\2\2\2\u024f\u0249\3\2\2\2\u024f\u0250\3\2\2\2\u0250")
        buf.write(")\3\2\2\2\u0251\u0253\7\u0082\2\2\u0252\u0254\t\3\2\2")
        buf.write("\u0253\u0252\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0255\3")
        buf.write("\2\2\2\u0255\u025a\5F$\2\u0256\u0257\7\7\2\2\u0257\u0259")
        buf.write("\5F$\2\u0258\u0256\3\2\2\2\u0259\u025c\3\2\2\2\u025a\u0258")
        buf.write("\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u0269\3\2\2\2\u025c")
        buf.write("\u025a\3\2\2\2\u025d\u0267\7M\2\2\u025e\u0263\5H%\2\u025f")
        buf.write("\u0260\7\7\2\2\u0260\u0262\5H%\2\u0261\u025f\3\2\2\2\u0262")
        buf.write("\u0265\3\2\2\2\u0263\u0261\3\2\2\2\u0263\u0264\3\2\2\2")
        buf.write("\u0264\u0268\3\2\2\2\u0265\u0263\3\2\2\2\u0266\u0268\5")
        buf.write("J&\2\u0267\u025e\3\2\2\2\u0267\u0266\3\2\2\2\u0268\u026a")
        buf.write("\3\2\2\2\u0269\u025d\3\2\2\2\u0269\u026a\3\2\2\2\u026a")
        buf.write("\u026d\3\2\2\2\u026b\u026c\7\u0094\2\2\u026c\u026e\5>")
        buf.write(" \2\u026d\u026b\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u027d")
        buf.write("\3\2\2\2\u026f\u0270\7P\2\2\u0270\u0271\7*\2\2\u0271\u0276")
        buf.write("\5> \2\u0272\u0273\7\7\2\2\u0273\u0275\5> \2\u0274\u0272")
        buf.write("\3\2\2\2\u0275\u0278\3\2\2\2\u0276\u0274\3\2\2\2\u0276")
        buf.write("\u0277\3\2\2\2\u0277\u027b\3\2\2\2\u0278\u0276\3\2\2\2")
        buf.write("\u0279\u027a\7Q\2\2\u027a\u027c\5> \2\u027b\u0279\3\2")
        buf.write("\2\2\u027b\u027c\3\2\2\2\u027c\u027e\3\2\2\2\u027d\u026f")
        buf.write("\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u029c\3\2\2\2\u027f")
        buf.write("\u0280\7\u0090\2\2\u0280\u0281\7\5\2\2\u0281\u0286\5>")
        buf.write(" \2\u0282\u0283\7\7\2\2\u0283\u0285\5> \2\u0284\u0282")
        buf.write("\3\2\2\2\u0285\u0288\3\2\2\2\u0286\u0284\3\2\2\2\u0286")
        buf.write("\u0287\3\2\2\2\u0287\u0289\3\2\2\2\u0288\u0286\3\2\2\2")
        buf.write("\u0289\u0298\7\6\2\2\u028a\u028b\7\7\2\2\u028b\u028c\7")
        buf.write("\5\2\2\u028c\u0291\5> \2\u028d\u028e\7\7\2\2\u028e\u0290")
        buf.write("\5> \2\u028f\u028d\3\2\2\2\u0290\u0293\3\2\2\2\u0291\u028f")
        buf.write("\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0294\3\2\2\2\u0293")
        buf.write("\u0291\3\2\2\2\u0294\u0295\7\6\2\2\u0295\u0297\3\2\2\2")
        buf.write("\u0296\u028a\3\2\2\2\u0297\u029a\3\2\2\2\u0298\u0296\3")
        buf.write("\2\2\2\u0298\u0299\3\2\2\2\u0299\u029c\3\2\2\2\u029a\u0298")
        buf.write("\3\2\2\2\u029b\u0251\3\2\2\2\u029b\u027f\3\2\2\2\u029c")
        buf.write("+\3\2\2\2\u029d\u029e\7\u008f\2\2\u029e-\3\2\2\2\u029f")
        buf.write("\u02a1\5@!\2\u02a0\u029f\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1")
        buf.write("\u02a2\3\2\2\2\u02a2\u02ad\7\u008d\2\2\u02a3\u02a4\7n")
        buf.write("\2\2\u02a4\u02ae\7\177\2\2\u02a5\u02a6\7n\2\2\u02a6\u02ae")
        buf.write("\7\33\2\2\u02a7\u02a8\7n\2\2\u02a8\u02ae\7|\2\2\u02a9")
        buf.write("\u02aa\7n\2\2\u02aa\u02ae\7J\2\2\u02ab\u02ac\7n\2\2\u02ac")
        buf.write("\u02ae\7S\2\2\u02ad\u02a3\3\2\2\2\u02ad\u02a5\3\2\2\2")
        buf.write("\u02ad\u02a7\3\2\2\2\u02ad\u02a9\3\2\2\2\u02ad\u02ab\3")
        buf.write("\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b0")
        buf.write("\5<\37\2\u02b0\u02b1\7\u0083\2\2\u02b1\u02b2\5l\67\2\u02b2")
        buf.write("\u02b3\7\b\2\2\u02b3\u02bb\5\24\13\2\u02b4\u02b5\7\7\2")
        buf.write("\2\u02b5\u02b6\5l\67\2\u02b6\u02b7\7\b\2\2\u02b7\u02b8")
        buf.write("\5\24\13\2\u02b8\u02ba\3\2\2\2\u02b9\u02b4\3\2\2\2\u02ba")
        buf.write("\u02bd\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bb\u02bc\3\2\2\2")
        buf.write("\u02bc\u02c0\3\2\2\2\u02bd\u02bb\3\2\2\2\u02be\u02bf\7")
        buf.write("\u0094\2\2\u02bf\u02c1\5\24\13\2\u02c0\u02be\3\2\2\2\u02c0")
        buf.write("\u02c1\3\2\2\2\u02c1/\3\2\2\2\u02c2\u02c4\5@!\2\u02c3")
        buf.write("\u02c2\3\2\2\2\u02c3\u02c4\3\2\2\2\u02c4\u02c5\3\2\2\2")
        buf.write("\u02c5\u02d0\7\u008d\2\2\u02c6\u02c7\7n\2\2\u02c7\u02d1")
        buf.write("\7\177\2\2\u02c8\u02c9\7n\2\2\u02c9\u02d1\7\33\2\2\u02ca")
        buf.write("\u02cb\7n\2\2\u02cb\u02d1\7|\2\2\u02cc\u02cd\7n\2\2\u02cd")
        buf.write("\u02d1\7J\2\2\u02ce\u02cf\7n\2\2\u02cf\u02d1\7S\2\2\u02d0")
        buf.write("\u02c6\3\2\2\2\u02d0\u02c8\3\2\2\2\u02d0\u02ca\3\2\2\2")
        buf.write("\u02d0\u02cc\3\2\2\2\u02d0\u02ce\3\2\2\2\u02d0\u02d1\3")
        buf.write("\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02d3\5<\37\2\u02d3\u02d4")
        buf.write("\7\u0083\2\2\u02d4\u02d5\5l\67\2\u02d5\u02d6\7\b\2\2\u02d6")
        buf.write("\u02de\5> \2\u02d7\u02d8\7\7\2\2\u02d8\u02d9\5l\67\2\u02d9")
        buf.write("\u02da\7\b\2\2\u02da\u02db\5> \2\u02db\u02dd\3\2\2\2\u02dc")
        buf.write("\u02d7\3\2\2\2\u02dd\u02e0\3\2\2\2\u02de\u02dc\3\2\2\2")
        buf.write("\u02de\u02df\3\2\2\2\u02df\u02e3\3\2\2\2\u02e0\u02de\3")
        buf.write("\2\2\2\u02e1\u02e2\7\u0094\2\2\u02e2\u02e4\5> \2\u02e3")
        buf.write("\u02e1\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02f7\3\2\2\2")
        buf.write("\u02e5\u02e6\7o\2\2\u02e6\u02e7\7*\2\2\u02e7\u02ec\5D")
        buf.write("#\2\u02e8\u02e9\7\7\2\2\u02e9\u02eb\5D#\2\u02ea\u02e8")
        buf.write("\3\2\2\2\u02eb\u02ee\3\2\2\2\u02ec\u02ea\3\2\2\2\u02ec")
        buf.write("\u02ed\3\2\2\2\u02ed\u02f0\3\2\2\2\u02ee\u02ec\3\2\2\2")
        buf.write("\u02ef\u02e5\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02f1\3")
        buf.write("\2\2\2\u02f1\u02f2\7d\2\2\u02f2\u02f5\5> \2\u02f3\u02f4")
        buf.write("\t\7\2\2\u02f4\u02f6\5> \2\u02f5\u02f3\3\2\2\2\u02f5\u02f6")
        buf.write("\3\2\2\2\u02f6\u02f8\3\2\2\2\u02f7\u02ef\3\2\2\2\u02f7")
        buf.write("\u02f8\3\2\2\2\u02f8\61\3\2\2\2\u02f9\u02fb\5@!\2\u02fa")
        buf.write("\u02f9\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u030d\3\2\2\2")
        buf.write("\u02fc\u030e\7Z\2\2\u02fd\u030e\7|\2\2\u02fe\u02ff\7Z")
        buf.write("\2\2\u02ff\u0300\7n\2\2\u0300\u030e\7|\2\2\u0301\u0302")
        buf.write("\7Z\2\2\u0302\u0303\7n\2\2\u0303\u030e\7\177\2\2\u0304")
        buf.write("\u0305\7Z\2\2\u0305\u0306\7n\2\2\u0306\u030e\7\33\2\2")
        buf.write("\u0307\u0308\7Z\2\2\u0308\u0309\7n\2\2\u0309\u030e\7J")
        buf.write("\2\2\u030a\u030b\7Z\2\2\u030b\u030c\7n\2\2\u030c\u030e")
        buf.write("\7S\2\2\u030d\u02fc\3\2\2\2\u030d\u02fd\3\2\2\2\u030d")
        buf.write("\u02fe\3\2\2\2\u030d\u0301\3\2\2\2\u030d\u0304\3\2\2\2")
        buf.write("\u030d\u0307\3\2\2\2\u030d\u030a\3\2\2\2\u030e\u030f\3")
        buf.write("\2\2\2\u030f\u0313\7]\2\2\u0310\u0311\5d\63\2\u0311\u0312")
        buf.write("\7\4\2\2\u0312\u0314\3\2\2\2\u0313\u0310\3\2\2\2\u0313")
        buf.write("\u0314\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0321\5j\66\2")
        buf.write("\u0316\u0317\7\5\2\2\u0317\u031c\5l\67\2\u0318\u0319\7")
        buf.write("\7\2\2\u0319\u031b\5l\67\2\u031a\u0318\3\2\2\2\u031b\u031e")
        buf.write("\3\2\2\2\u031c\u031a\3\2\2\2\u031c\u031d\3\2\2\2\u031d")
        buf.write("\u031f\3\2\2\2\u031e\u031c\3\2\2\2\u031f\u0320\7\6\2\2")
        buf.write("\u0320\u0322\3\2\2\2\u0321\u0316\3\2\2\2\u0321\u0322\3")
        buf.write("\2\2\2\u0322\u0342\3\2\2\2\u0323\u0324\7\u0090\2\2\u0324")
        buf.write("\u0325\7\5\2\2\u0325\u032a\5\24\13\2\u0326\u0327\7\7\2")
        buf.write("\2\u0327\u0329\5\24\13\2\u0328\u0326\3\2\2\2\u0329\u032c")
        buf.write("\3\2\2\2\u032a\u0328\3\2\2\2\u032a\u032b\3\2\2\2\u032b")
        buf.write("\u032d\3\2\2\2\u032c\u032a\3\2\2\2\u032d\u033c\7\6\2\2")
        buf.write("\u032e\u032f\7\7\2\2\u032f\u0330\7\5\2\2\u0330\u0335\5")
        buf.write("\24\13\2\u0331\u0332\7\7\2\2\u0332\u0334\5\24\13\2\u0333")
        buf.write("\u0331\3\2\2\2\u0334\u0337\3\2\2\2\u0335\u0333\3\2\2\2")
        buf.write("\u0335\u0336\3\2\2\2\u0336\u0338\3\2\2\2\u0337\u0335\3")
        buf.write("\2\2\2\u0338\u0339\7\6\2\2\u0339\u033b\3\2\2\2\u033a\u032e")
        buf.write("\3\2\2\2\u033b\u033e\3\2\2\2\u033c\u033a\3\2\2\2\u033c")
        buf.write("\u033d\3\2\2\2\u033d\u0343\3\2\2\2\u033e\u033c\3\2\2\2")
        buf.write("\u033f\u0343\5(\25\2\u0340\u0341\7:\2\2\u0341\u0343\7")
        buf.write("\u0090\2\2\u0342\u0323\3\2\2\2\u0342\u033f\3\2\2\2\u0342")
        buf.write("\u0340\3\2\2\2\u0343\63\3\2\2\2\u0344\u0345\7A\2\2\u0345")
        buf.write("\u0348\7V\2\2\u0346\u0347\7R\2\2\u0347\u0349\7H\2\2\u0348")
        buf.write("\u0346\3\2\2\2\u0348\u0349\3\2\2\2\u0349\u034d\3\2\2\2")
        buf.write("\u034a\u034b\5d\63\2\u034b\u034c\7\4\2\2\u034c\u034e\3")
        buf.write("\2\2\2\u034d\u034a\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u034f")
        buf.write("\3\2\2\2\u034f\u0350\5p9\2\u0350\65\3\2\2\2\u0351\u0352")
        buf.write("\7A\2\2\u0352\u0355\7\u0084\2\2\u0353\u0354\7R\2\2\u0354")
        buf.write("\u0356\7H\2\2\u0355\u0353\3\2\2\2\u0355\u0356\3\2\2\2")
        buf.write("\u0356\u035a\3\2\2\2\u0357\u0358\5d\63\2\u0358\u0359\7")
        buf.write("\4\2\2\u0359\u035b\3\2\2\2\u035a\u0357\3\2\2\2\u035a\u035b")
        buf.write("\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035d\5j\66\2\u035d")
        buf.write("\67\3\2\2\2\u035e\u0360\5@!\2\u035f\u035e\3\2\2\2\u035f")
        buf.write("\u0360\3\2\2\2\u0360\u0361\3\2\2\2\u0361\u0362\7=\2\2")
        buf.write("\u0362\u0363\7M\2\2\u0363\u0366\5<\37\2\u0364\u0365\7")
        buf.write("\u0094\2\2\u0365\u0367\5\24\13\2\u0366\u0364\3\2\2\2\u0366")
        buf.write("\u0367\3\2\2\2\u03679\3\2\2\2\u0368\u036a\5@!\2\u0369")
        buf.write("\u0368\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u036b\3\2\2\2")
        buf.write("\u036b\u036c\7=\2\2\u036c\u036d\7M\2\2\u036d\u0370\5<")
        buf.write("\37\2\u036e\u036f\7\u0094\2\2\u036f\u0371\5> \2\u0370")
        buf.write("\u036e\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0384\3\2\2\2")
        buf.write("\u0372\u0373\7o\2\2\u0373\u0374\7*\2\2\u0374\u0379\5D")
        buf.write("#\2\u0375\u0376\7\7\2\2\u0376\u0378\5D#\2\u0377\u0375")
        buf.write("\3\2\2\2\u0378\u037b\3\2\2\2\u0379\u0377\3\2\2\2\u0379")
        buf.write("\u037a\3\2\2\2\u037a\u037d\3\2\2\2\u037b\u0379\3\2\2\2")
        buf.write("\u037c\u0372\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u037e\3")
        buf.write("\2\2\2\u037e\u037f\7d\2\2\u037f\u0382\5> \2\u0380\u0381")
        buf.write("\t\7\2\2\u0381\u0383\5> \2\u0382\u0380\3\2\2\2\u0382\u0383")
        buf.write("\3\2\2\2\u0383\u0385\3\2\2\2\u0384\u037c\3\2\2\2\u0384")
        buf.write("\u0385\3\2\2\2\u0385;\3\2\2\2\u0386\u0387\5d\63\2\u0387")
        buf.write("\u0388\7\4\2\2\u0388\u038a\3\2\2\2\u0389\u0386\3\2\2\2")
        buf.write("\u0389\u038a\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u0391\5")
        buf.write("j\66\2\u038c\u038d\7W\2\2\u038d\u038e\7*\2\2\u038e\u0392")
        buf.write("\5p9\2\u038f\u0390\7h\2\2\u0390\u0392\7W\2\2\u0391\u038c")
        buf.write("\3\2\2\2\u0391\u038f\3\2\2\2\u0391\u0392\3\2\2\2\u0392")
        buf.write("=\3\2\2\2\u0393\u0394\b \1\2\u0394\u03c6\5Z.\2\u0395\u03c6")
        buf.write("\7\u0099\2\2\u0396\u0397\5d\63\2\u0397\u0398\7\4\2\2\u0398")
        buf.write("\u039a\3\2\2\2\u0399\u0396\3\2\2\2\u0399\u039a\3\2\2\2")
        buf.write("\u039a\u039b\3\2\2\2\u039b\u039c\5j\66\2\u039c\u039d\7")
        buf.write("\4\2\2\u039d\u039f\3\2\2\2\u039e\u0399\3\2\2\2\u039e\u039f")
        buf.write("\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03c6\5l\67\2\u03a1")
        buf.write("\u03a2\5\\/\2\u03a2\u03a3\5> \24\u03a3\u03c6\3\2\2\2\u03a4")
        buf.write("\u03a5\7\5\2\2\u03a5\u03a6\5> \2\u03a6\u03a7\7\6\2\2\u03a7")
        buf.write("\u03c6\3\2\2\2\u03a8\u03aa\7h\2\2\u03a9\u03a8\3\2\2\2")
        buf.write("\u03a9\u03aa\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ad\7")
        buf.write("H\2\2\u03ac\u03a9\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03ae")
        buf.write("\3\2\2\2\u03ae\u03af\7\5\2\2\u03af\u03b0\5(\25\2\u03b0")
        buf.write("\u03b1\7\6\2\2\u03b1\u03c6\3\2\2\2\u03b2\u03b4\7,\2\2")
        buf.write("\u03b3\u03b5\5> \2\u03b4\u03b3\3\2\2\2\u03b4\u03b5\3\2")
        buf.write("\2\2\u03b5\u03bb\3\2\2\2\u03b6\u03b7\7\u0093\2\2\u03b7")
        buf.write("\u03b8\5> \2\u03b8\u03b9\7\u0087\2\2\u03b9\u03ba\5> \2")
        buf.write("\u03ba\u03bc\3\2\2\2\u03bb\u03b6\3\2\2\2\u03bc\u03bd\3")
        buf.write("\2\2\2\u03bd\u03bb\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03c1")
        buf.write("\3\2\2\2\u03bf\u03c0\7C\2\2\u03c0\u03c2\5> \2\u03c1\u03bf")
        buf.write("\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3")
        buf.write("\u03c4\7D\2\2\u03c4\u03c6\3\2\2\2\u03c5\u0393\3\2\2\2")
        buf.write("\u03c5\u0395\3\2\2\2\u03c5\u039e\3\2\2\2\u03c5\u03a1\3")
        buf.write("\2\2\2\u03c5\u03a4\3\2\2\2\u03c5\u03ac\3\2\2\2\u03c5\u03b2")
        buf.write("\3\2\2\2\u03c6\u041e\3\2\2\2\u03c7\u03c8\f\23\2\2\u03c8")
        buf.write("\u03c9\7\r\2\2\u03c9\u041d\5> \24\u03ca\u03cb\f\22\2\2")
        buf.write("\u03cb\u03cc\t\b\2\2\u03cc\u041d\5> \23\u03cd\u03ce\f")
        buf.write("\21\2\2\u03ce\u03cf\t\t\2\2\u03cf\u041d\5> \22\u03d0\u03d1")
        buf.write("\f\20\2\2\u03d1\u03d2\t\n\2\2\u03d2\u041d\5> \21\u03d3")
        buf.write("\u03d4\f\17\2\2\u03d4\u03d5\t\13\2\2\u03d5\u041d\5> \20")
        buf.write("\u03d6\u03d7\f\16\2\2\u03d7\u03d8\t\f\2\2\u03d8\u041d")
        buf.write("\5> \17\u03d9\u03da\f\f\2\2\u03da\u03db\7\"\2\2\u03db")
        buf.write("\u041d\5> \r\u03dc\u03dd\f\13\2\2\u03dd\u03de\7n\2\2\u03de")
        buf.write("\u041d\5> \f\u03df\u03e0\f\6\2\2\u03e0\u03e2\7^\2\2\u03e1")
        buf.write("\u03e3\7h\2\2\u03e2\u03e1\3\2\2\2\u03e2\u03e3\3\2\2\2")
        buf.write("\u03e3\u03e4\3\2\2\2\u03e4\u041d\5> \7\u03e5\u03e7\f\5")
        buf.write("\2\2\u03e6\u03e8\7h\2\2\u03e7\u03e6\3\2\2\2\u03e7\u03e8")
        buf.write("\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03ea\7)\2\2\u03ea")
        buf.write("\u03eb\5> \2\u03eb\u03ec\7\"\2\2\u03ec\u03ed\5> \6\u03ed")
        buf.write("\u041d\3\2\2\2\u03ee\u03f0\f\r\2\2\u03ef\u03f1\7h\2\2")
        buf.write("\u03f0\u03ef\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f2\3")
        buf.write("\2\2\2\u03f2\u0406\7U\2\2\u03f3\u03fd\7\5\2\2\u03f4\u03fe")
        buf.write("\5(\25\2\u03f5\u03fa\5> \2\u03f6\u03f7\7\7\2\2\u03f7\u03f9")
        buf.write("\5> \2\u03f8\u03f6\3\2\2\2\u03f9\u03fc\3\2\2\2\u03fa\u03f8")
        buf.write("\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fe\3\2\2\2\u03fc")
        buf.write("\u03fa\3\2\2\2\u03fd\u03f4\3\2\2\2\u03fd\u03f5\3\2\2\2")
        buf.write("\u03fd\u03fe\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0407\7")
        buf.write("\6\2\2\u0400\u0401\5d\63\2\u0401\u0402\7\4\2\2\u0402\u0404")
        buf.write("\3\2\2\2\u0403\u0400\3\2\2\2\u0403\u0404\3\2\2\2\u0404")
        buf.write("\u0405\3\2\2\2\u0405\u0407\5j\66\2\u0406\u03f3\3\2\2\2")
        buf.write("\u0406\u0403\3\2\2\2\u0407\u041d\3\2\2\2\u0408\u0409\f")
        buf.write("\t\2\2\u0409\u040a\7/\2\2\u040a\u041d\5n8\2\u040b\u040d")
        buf.write("\f\b\2\2\u040c\u040e\7h\2\2\u040d\u040c\3\2\2\2\u040d")
        buf.write("\u040e\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0410\t\r\2\2")
        buf.write("\u0410\u0413\5> \2\u0411\u0412\7E\2\2\u0412\u0414\5> ")
        buf.write("\2\u0413\u0411\3\2\2\2\u0413\u0414\3\2\2\2\u0414\u041d")
        buf.write("\3\2\2\2\u0415\u041a\f\7\2\2\u0416\u041b\7_\2\2\u0417")
        buf.write("\u041b\7i\2\2\u0418\u0419\7h\2\2\u0419\u041b\7j\2\2\u041a")
        buf.write("\u0416\3\2\2\2\u041a\u0417\3\2\2\2\u041a\u0418\3\2\2\2")
        buf.write("\u041b\u041d\3\2\2\2\u041c\u03c7\3\2\2\2\u041c\u03ca\3")
        buf.write("\2\2\2\u041c\u03cd\3\2\2\2\u041c\u03d0\3\2\2\2\u041c\u03d3")
        buf.write("\3\2\2\2\u041c\u03d6\3\2\2\2\u041c\u03d9\3\2\2\2\u041c")
        buf.write("\u03dc\3\2\2\2\u041c\u03df\3\2\2\2\u041c\u03e5\3\2\2\2")
        buf.write("\u041c\u03ee\3\2\2\2\u041c\u0408\3\2\2\2\u041c\u040b\3")
        buf.write("\2\2\2\u041c\u0415\3\2\2\2\u041d\u0420\3\2\2\2\u041e\u041c")
        buf.write("\3\2\2\2\u041e\u041f\3\2\2\2\u041f?\3\2\2\2\u0420\u041e")
        buf.write("\3\2\2\2\u0421\u0423\7\u0095\2\2\u0422\u0424\7v\2\2\u0423")
        buf.write("\u0422\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0425\3\2\2\2")
        buf.write("\u0425\u042a\5B\"\2\u0426\u0427\7\7\2\2\u0427\u0429\5")
        buf.write("B\"\2\u0428\u0426\3\2\2\2\u0429\u042c\3\2\2\2\u042a\u0428")
        buf.write("\3\2\2\2\u042a\u042b\3\2\2\2\u042bA\3\2\2\2\u042c\u042a")
        buf.write("\3\2\2\2\u042d\u0439\5j\66\2\u042e\u042f\7\5\2\2\u042f")
        buf.write("\u0434\5l\67\2\u0430\u0431\7\7\2\2\u0431\u0433\5l\67\2")
        buf.write("\u0432\u0430\3\2\2\2\u0433\u0436\3\2\2\2\u0434\u0432\3")
        buf.write("\2\2\2\u0434\u0435\3\2\2\2\u0435\u0437\3\2\2\2\u0436\u0434")
        buf.write("\3\2\2\2\u0437\u0438\7\6\2\2\u0438\u043a\3\2\2\2\u0439")
        buf.write("\u042e\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043b\3\2\2\2")
        buf.write("\u043b\u043c\7#\2\2\u043c\u043d\7\5\2\2\u043d\u043e\5")
        buf.write("(\25\2\u043e\u043f\7\6\2\2\u043fC\3\2\2\2\u0440\u0443")
        buf.write("\5> \2\u0441\u0442\7/\2\2\u0442\u0444\5n8\2\u0443\u0441")
        buf.write("\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0446\3\2\2\2\u0445")
        buf.write("\u0447\t\5\2\2\u0446\u0445\3\2\2\2\u0446\u0447\3\2\2\2")
        buf.write("\u0447E\3\2\2\2\u0448\u0455\7\t\2\2\u0449\u044a\5j\66")
        buf.write("\2\u044a\u044b\7\4\2\2\u044b\u044c\7\t\2\2\u044c\u0455")
        buf.write("\3\2\2\2\u044d\u0452\5> \2\u044e\u0450\7#\2\2\u044f\u044e")
        buf.write("\3\2\2\2\u044f\u0450\3\2\2\2\u0450\u0451\3\2\2\2\u0451")
        buf.write("\u0453\5^\60\2\u0452\u044f\3\2\2\2\u0452\u0453\3\2\2\2")
        buf.write("\u0453\u0455\3\2\2\2\u0454\u0448\3\2\2\2\u0454\u0449\3")
        buf.write("\2\2\2\u0454\u044d\3\2\2\2\u0455G\3\2\2\2\u0456\u0457")
        buf.write("\5f\64\2\u0457\u0458\7\4\2\2\u0458\u045a\3\2\2\2\u0459")
        buf.write("\u0456\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045b\3\2\2\2")
        buf.write("\u045b\u0460\5j\66\2\u045c\u045e\7#\2\2\u045d\u045c\3")
        buf.write("\2\2\2\u045d\u045e\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u0461")
        buf.write("\5r:\2\u0460\u045d\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0467")
        buf.write("\3\2\2\2\u0462\u0463\7W\2\2\u0463\u0464\7*\2\2\u0464\u0468")
        buf.write("\5p9\2\u0465\u0466\7h\2\2\u0466\u0468\7W\2\2\u0467\u0462")
        buf.write("\3\2\2\2\u0467\u0465\3\2\2\2\u0467\u0468\3\2\2\2\u0468")
        buf.write("\u0499\3\2\2\2\u0469\u046a\5f\64\2\u046a\u046b\7\4\2\2")
        buf.write("\u046b\u046d\3\2\2\2\u046c\u0469\3\2\2\2\u046c\u046d\3")
        buf.write("\2\2\2\u046d\u046e\3\2\2\2\u046e\u046f\5h\65\2\u046f\u0478")
        buf.write("\7\5\2\2\u0470\u0475\5> \2\u0471\u0472\7\7\2\2\u0472\u0474")
        buf.write("\5> \2\u0473\u0471\3\2\2\2\u0474\u0477\3\2\2\2\u0475\u0473")
        buf.write("\3\2\2\2\u0475\u0476\3\2\2\2\u0476\u0479\3\2\2\2\u0477")
        buf.write("\u0475\3\2\2\2\u0478\u0470\3\2\2\2\u0478\u0479\3\2\2\2")
        buf.write("\u0479\u047a\3\2\2\2\u047a\u047f\7\6\2\2\u047b\u047d\7")
        buf.write("#\2\2\u047c\u047b\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u047e")
        buf.write("\3\2\2\2\u047e\u0480\5r:\2\u047f\u047c\3\2\2\2\u047f\u0480")
        buf.write("\3\2\2\2\u0480\u0499\3\2\2\2\u0481\u048b\7\5\2\2\u0482")
        buf.write("\u0487\5H%\2\u0483\u0484\7\7\2\2\u0484\u0486\5H%\2\u0485")
        buf.write("\u0483\3\2\2\2\u0486\u0489\3\2\2\2\u0487\u0485\3\2\2\2")
        buf.write("\u0487\u0488\3\2\2\2\u0488\u048c\3\2\2\2\u0489\u0487\3")
        buf.write("\2\2\2\u048a\u048c\5J&\2\u048b\u0482\3\2\2\2\u048b\u048a")
        buf.write("\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e\7\6\2\2\u048e")
        buf.write("\u0499\3\2\2\2\u048f\u0490\7\5\2\2\u0490\u0491\5(\25\2")
        buf.write("\u0491\u0496\7\6\2\2\u0492\u0494\7#\2\2\u0493\u0492\3")
        buf.write("\2\2\2\u0493\u0494\3\2\2\2\u0494\u0495\3\2\2\2\u0495\u0497")
        buf.write("\5r:\2\u0496\u0493\3\2\2\2\u0496\u0497\3\2\2\2\u0497\u0499")
        buf.write("\3\2\2\2\u0498\u0459\3\2\2\2\u0498\u046c\3\2\2\2\u0498")
        buf.write("\u0481\3\2\2\2\u0498\u048f\3\2\2\2\u0499I\3\2\2\2\u049a")
        buf.write("\u04a1\5H%\2\u049b\u049c\5L\'\2\u049c\u049d\5H%\2\u049d")
        buf.write("\u049e\5N(\2\u049e\u04a0\3\2\2\2\u049f\u049b\3\2\2\2\u04a0")
        buf.write("\u04a3\3\2\2\2\u04a1\u049f\3\2\2\2\u04a1\u04a2\3\2\2\2")
        buf.write("\u04a2K\3\2\2\2\u04a3\u04a1\3\2\2\2\u04a4\u04b2\7\7\2")
        buf.write("\2\u04a5\u04a7\7f\2\2\u04a6\u04a5\3\2\2\2\u04a6\u04a7")
        buf.write("\3\2\2\2\u04a7\u04ae\3\2\2\2\u04a8\u04aa\7b\2\2\u04a9")
        buf.write("\u04ab\7p\2\2\u04aa\u04a9\3\2\2\2\u04aa\u04ab\3\2\2\2")
        buf.write("\u04ab\u04af\3\2\2\2\u04ac\u04af\7Y\2\2\u04ad\u04af\7")
        buf.write("\65\2\2\u04ae\u04a8\3\2\2\2\u04ae\u04ac\3\2\2\2\u04ae")
        buf.write("\u04ad\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b0\3\2\2\2")
        buf.write("\u04b0\u04b2\7`\2\2\u04b1\u04a4\3\2\2\2\u04b1\u04a6\3")
        buf.write("\2\2\2\u04b2M\3\2\2\2\u04b3\u04b4\7m\2\2\u04b4\u04c2\5")
        buf.write("> \2\u04b5\u04b6\7\u008e\2\2\u04b6\u04b7\7\5\2\2\u04b7")
        buf.write("\u04bc\5l\67\2\u04b8\u04b9\7\7\2\2\u04b9\u04bb\5l\67\2")
        buf.write("\u04ba\u04b8\3\2\2\2\u04bb\u04be\3\2\2\2\u04bc\u04ba\3")
        buf.write("\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\u04bf\3\2\2\2\u04be\u04bc")
        buf.write("\3\2\2\2\u04bf\u04c0\7\6\2\2\u04c0\u04c2\3\2\2\2\u04c1")
        buf.write("\u04b3\3\2\2\2\u04c1\u04b5\3\2\2\2\u04c1\u04c2\3\2\2\2")
        buf.write("\u04c2O\3\2\2\2\u04c3\u04c5\7\u0082\2\2\u04c4\u04c6\t")
        buf.write("\3\2\2\u04c5\u04c4\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6\u04c7")
        buf.write("\3\2\2\2\u04c7\u04cc\5F$\2\u04c8\u04c9\7\7\2\2\u04c9\u04cb")
        buf.write("\5F$\2\u04ca\u04c8\3\2\2\2\u04cb\u04ce\3\2\2\2\u04cc\u04ca")
        buf.write("\3\2\2\2\u04cc\u04cd\3\2\2\2\u04cd\u04db\3\2\2\2\u04ce")
        buf.write("\u04cc\3\2\2\2\u04cf\u04d9\7M\2\2\u04d0\u04d5\5H%\2\u04d1")
        buf.write("\u04d2\7\7\2\2\u04d2\u04d4\5H%\2\u04d3\u04d1\3\2\2\2\u04d4")
        buf.write("\u04d7\3\2\2\2\u04d5\u04d3\3\2\2\2\u04d5\u04d6\3\2\2\2")
        buf.write("\u04d6\u04da\3\2\2\2\u04d7\u04d5\3\2\2\2\u04d8\u04da\5")
        buf.write("J&\2\u04d9\u04d0\3\2\2\2\u04d9\u04d8\3\2\2\2\u04da\u04dc")
        buf.write("\3\2\2\2\u04db\u04cf\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc")
        buf.write("\u04df\3\2\2\2\u04dd\u04de\7\u0094\2\2\u04de\u04e0\5>")
        buf.write(" \2\u04df\u04dd\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0\u04ef")
        buf.write("\3\2\2\2\u04e1\u04e2\7P\2\2\u04e2\u04e3\7*\2\2\u04e3\u04e8")
        buf.write("\5> \2\u04e4\u04e5\7\7\2\2\u04e5\u04e7\5> \2\u04e6\u04e4")
        buf.write("\3\2\2\2\u04e7\u04ea\3\2\2\2\u04e8\u04e6\3\2\2\2\u04e8")
        buf.write("\u04e9\3\2\2\2\u04e9\u04ed\3\2\2\2\u04ea\u04e8\3\2\2\2")
        buf.write("\u04eb\u04ec\7Q\2\2\u04ec\u04ee\5> \2\u04ed\u04eb\3\2")
        buf.write("\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04f0\3\2\2\2\u04ef\u04e1")
        buf.write("\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0Q\3\2\2\2\u04f1\u04f2")
        buf.write("\7m\2\2\u04f2\u04f3\7\62\2\2\u04f3\u04f5\t\16\2\2\u04f4")
        buf.write("\u04f1\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5S\3\2\2\2\u04f6")
        buf.write("\u04fc\7\u008b\2\2\u04f7\u04f8\7\u008b\2\2\u04f8\u04fc")
        buf.write("\7\37\2\2\u04f9\u04fc\7\\\2\2\u04fa\u04fc\7F\2\2\u04fb")
        buf.write("\u04f6\3\2\2\2\u04fb\u04f7\3\2\2\2\u04fb\u04f9\3\2\2\2")
        buf.write("\u04fb\u04fa\3\2\2\2\u04fcU\3\2\2\2\u04fd\u04fe\5t;\2")
        buf.write("\u04feW\3\2\2\2\u04ff\u0501\t\t\2\2\u0500\u04ff\3\2\2")
        buf.write("\2\u0500\u0501\3\2\2\2\u0501\u0502\3\2\2\2\u0502\u0503")
        buf.write("\7\u0098\2\2\u0503Y\3\2\2\2\u0504\u0505\t\17\2\2\u0505")
        buf.write("[\3\2\2\2\u0506\u0507\t\20\2\2\u0507]\3\2\2\2\u0508\u0509")
        buf.write("\t\21\2\2\u0509_\3\2\2\2\u050a\u050b\t\22\2\2\u050ba\3")
        buf.write("\2\2\2\u050c\u050d\5t;\2\u050dc\3\2\2\2\u050e\u050f\5")
        buf.write("t;\2\u050fe\3\2\2\2\u0510\u0511\5t;\2\u0511g\3\2\2\2\u0512")
        buf.write("\u0513\5t;\2\u0513i\3\2\2\2\u0514\u0515\5t;\2\u0515k\3")
        buf.write("\2\2\2\u0516\u0517\5t;\2\u0517m\3\2\2\2\u0518\u0519\5")
        buf.write("t;\2\u0519o\3\2\2\2\u051a\u051b\5t;\2\u051bq\3\2\2\2\u051c")
        buf.write("\u0523\7\u0097\2\2\u051d\u0523\7\u009a\2\2\u051e\u051f")
        buf.write("\7\5\2\2\u051f\u0520\5r:\2\u0520\u0521\7\6\2\2\u0521\u0523")
        buf.write("\3\2\2\2\u0522\u051c\3\2\2\2\u0522\u051d\3\2\2\2\u0522")
        buf.write("\u051e\3\2\2\2\u0523s\3\2\2\2\u0524\u052c\7\u0097\2\2")
        buf.write("\u0525\u052c\5`\61\2\u0526\u052c\7\u009a\2\2\u0527\u0528")
        buf.write("\7\5\2\2\u0528\u0529\5t;\2\u0529\u052a\7\6\2\2\u052a\u052c")
        buf.write("\3\2\2\2\u052b\u0524\3\2\2\2\u052b\u0525\3\2\2\2\u052b")
        buf.write("\u0526\3\2\2\2\u052b\u0527\3\2\2\2\u052cu\3\2\2\2\u00c2")
        buf.write("y\u0081\u0088\u008d\u0093\u00a2\u00a9\u00ad\u00af\u00b3")
        buf.write("\u00b9\u00be\u00c9\u00cf\u00d3\u00d9\u00de\u00e7\u00ee")
        buf.write("\u00f4\u00f8\u00fc\u0103\u0108\u010c\u0110\u011a\u011f")
        buf.write("\u0125\u012d\u0132\u0137\u013b\u013e\u0150\u0155\u015f")
        buf.write("\u0164\u0170\u0174\u0178\u017c\u0183\u0185\u0189\u018e")
        buf.write("\u0196\u01a9\u01af\u01b3\u01b8\u01be\u01ca\u01cf\u01d2")
        buf.write("\u01d5\u01da\u01de\u01e3\u01ec\u01ef\u01f5\u01f7\u01fa")
        buf.write("\u0202\u020c\u020f\u0215\u0217\u021a\u0224\u0227\u022d")
        buf.write("\u022f\u0232\u023a\u0244\u0247\u024d\u024f\u0253\u025a")
        buf.write("\u0263\u0267\u0269\u026d\u0276\u027b\u027d\u0286\u0291")
        buf.write("\u0298\u029b\u02a0\u02ad\u02bb\u02c0\u02c3\u02d0\u02de")
        buf.write("\u02e3\u02ec\u02ef\u02f5\u02f7\u02fa\u030d\u0313\u031c")
        buf.write("\u0321\u032a\u0335\u033c\u0342\u0348\u034d\u0355\u035a")
        buf.write("\u035f\u0366\u0369\u0370\u0379\u037c\u0382\u0384\u0389")
        buf.write("\u0391\u0399\u039e\u03a9\u03ac\u03b4\u03bd\u03c1\u03c5")
        buf.write("\u03e2\u03e7\u03f0\u03fa\u03fd\u0403\u0406\u040d\u0413")
        buf.write("\u041a\u041c\u041e\u0423\u042a\u0434\u0439\u0443\u0446")
        buf.write("\u044f\u0452\u0454\u0459\u045d\u0460\u0467\u046c\u0475")
        buf.write("\u0478\u047c\u047f\u0487\u048b\u0493\u0496\u0498\u04a1")
        buf.write("\u04a6\u04aa\u04ae\u04b1\u04bc\u04c1\u04c5\u04cc\u04d5")
        buf.write("\u04d9\u04db\u04df\u04e8\u04ed\u04ef\u04f4\u04fb\u0500")
        buf.write("\u0522\u052b")
        return buf.getvalue()


class sqlParser ( Parser ):

    grammarFileName = "sql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", 
                     "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'" ]

    symbolicNames = [ "<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                      "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", 
                      "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
                      "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
                      "K_ABORT", "K_ACTION", "K_ADD", "K_AFTER", "K_ALL", 
                      "K_ALTER", "K_ANALYZE", "K_AND", "K_AS", "K_ASC", 
                      "K_ATTACH", "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", 
                      "K_BETWEEN", "K_BY", "K_CASCADE", "K_CASE", "K_CAST", 
                      "K_CHECK", "K_COLLATE", "K_COLUMN", "K_COMMIT", "K_CONFLICT", 
                      "K_CONSTRAINT", "K_CREATE", "K_CROSS", "K_CURRENT_DATE", 
                      "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
                      "K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", "K_DELETE", 
                      "K_DESC", "K_DETACH", "K_DISTINCT", "K_DROP", "K_EACH", 
                      "K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", "K_EXCLUSIVE", 
                      "K_EXISTS", "K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN", 
                      "K_FROM", "K_FULL", "K_GLOB", "K_GROUP", "K_HAVING", 
                      "K_IF", "K_IGNORE", "K_IMMEDIATE", "K_IN", "K_INDEX", 
                      "K_INDEXED", "K_INITIALLY", "K_INNER", "K_INSERT", 
                      "K_INSTEAD", "K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL", 
                      "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", 
                      "K_MATCH", "K_NATURAL", "K_NO", "K_NOT", "K_NOTNULL", 
                      "K_NULL", "K_OF", "K_OFFSET", "K_ON", "K_OR", "K_ORDER", 
                      "K_OUTER", "K_PLAN", "K_PRAGMA", "K_PRIMARY", "K_QUERY", 
                      "K_RAISE", "K_RECURSIVE", "K_REFERENCES", "K_REGEXP", 
                      "K_REINDEX", "K_RELEASE", "K_RENAME", "K_REPLACE", 
                      "K_RESTRICT", "K_RIGHT", "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", 
                      "K_SELECT", "K_SET", "K_TABLE", "K_TEMP", "K_TEMPORARY", 
                      "K_THEN", "K_TO", "K_TRANSACTION", "K_TRIGGER", "K_UNION", 
                      "K_UNIQUE", "K_UPDATE", "K_USING", "K_VACUUM", "K_VALUES", 
                      "K_VIEW", "K_VIRTUAL", "K_WHEN", "K_WHERE", "K_WITH", 
                      "K_WITHOUT", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", 
                      "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
                      "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR" ]

    RULE_root = 0
    RULE_query_statements_list = 1
    RULE_statement_node = 2
    RULE_reindex_stmt = 3
    RULE_create_index_stmt = 4
    RULE_create_table_stmt = 5
    RULE_simp_select_stmt = 6
    RULE_result_column_1 = 7
    RULE_some_operator = 8
    RULE_expr1 = 9
    RULE_column_constraint = 10
    RULE_foreign_key_clause = 11
    RULE_table_constraint = 12
    RULE_column_def = 13
    RULE_type_name = 14
    RULE_indexed_column = 15
    RULE_compound_select_stmt = 16
    RULE_factored_select_stmt = 17
    RULE_simple_select_stmt = 18
    RULE_select_stmt = 19
    RULE_select_or_values = 20
    RULE_vacuum_stmt = 21
    RULE_update_stmt = 22
    RULE_update_stmt_limited = 23
    RULE_insert_stmt = 24
    RULE_drop_index_stmt = 25
    RULE_drop_table_stmt = 26
    RULE_delete_stmt = 27
    RULE_delete_stmt_limited = 28
    RULE_qualified_table_name = 29
    RULE_expr = 30
    RULE_with_clause = 31
    RULE_common_table_expression = 32
    RULE_ordering_term = 33
    RULE_result_column = 34
    RULE_table_or_subquery = 35
    RULE_join_clause = 36
    RULE_join_operator = 37
    RULE_join_constraint = 38
    RULE_select_core = 39
    RULE_conflict_clause = 40
    RULE_compound_operator = 41
    RULE_foreign_table = 42
    RULE_signed_number = 43
    RULE_literal_value = 44
    RULE_unary_operator = 45
    RULE_column_alias = 46
    RULE_keyword = 47
    RULE_name = 48
    RULE_database_name = 49
    RULE_schema_name = 50
    RULE_table_function_name = 51
    RULE_table_name = 52
    RULE_column_name = 53
    RULE_collation_name = 54
    RULE_index_name = 55
    RULE_table_alias = 56
    RULE_any_name = 57

    ruleNames =  [ "root", "query_statements_list", "statement_node", "reindex_stmt", 
                   "create_index_stmt", "create_table_stmt", "simp_select_stmt", 
                   "result_column_1", "some_operator", "expr1", "column_constraint", 
                   "foreign_key_clause", "table_constraint", "column_def", 
                   "type_name", "indexed_column", "compound_select_stmt", 
                   "factored_select_stmt", "simple_select_stmt", "select_stmt", 
                   "select_or_values", "vacuum_stmt", "update_stmt", "update_stmt_limited", 
                   "insert_stmt", "drop_index_stmt", "drop_table_stmt", 
                   "delete_stmt", "delete_stmt_limited", "qualified_table_name", 
                   "expr", "with_clause", "common_table_expression", "ordering_term", 
                   "result_column", "table_or_subquery", "join_clause", 
                   "join_operator", "join_constraint", "select_core", "conflict_clause", 
                   "compound_operator", "foreign_table", "signed_number", 
                   "literal_value", "unary_operator", "column_alias", "keyword", 
                   "name", "database_name", "schema_name", "table_function_name", 
                   "table_name", "column_name", "collation_name", "index_name", 
                   "table_alias", "any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    K_ABORT=25
    K_ACTION=26
    K_ADD=27
    K_AFTER=28
    K_ALL=29
    K_ALTER=30
    K_ANALYZE=31
    K_AND=32
    K_AS=33
    K_ASC=34
    K_ATTACH=35
    K_AUTOINCREMENT=36
    K_BEFORE=37
    K_BEGIN=38
    K_BETWEEN=39
    K_BY=40
    K_CASCADE=41
    K_CASE=42
    K_CAST=43
    K_CHECK=44
    K_COLLATE=45
    K_COLUMN=46
    K_COMMIT=47
    K_CONFLICT=48
    K_CONSTRAINT=49
    K_CREATE=50
    K_CROSS=51
    K_CURRENT_DATE=52
    K_CURRENT_TIME=53
    K_CURRENT_TIMESTAMP=54
    K_DATABASE=55
    K_DEFAULT=56
    K_DEFERRABLE=57
    K_DEFERRED=58
    K_DELETE=59
    K_DESC=60
    K_DETACH=61
    K_DISTINCT=62
    K_DROP=63
    K_EACH=64
    K_ELSE=65
    K_END=66
    K_ESCAPE=67
    K_EXCEPT=68
    K_EXCLUSIVE=69
    K_EXISTS=70
    K_EXPLAIN=71
    K_FAIL=72
    K_FOR=73
    K_FOREIGN=74
    K_FROM=75
    K_FULL=76
    K_GLOB=77
    K_GROUP=78
    K_HAVING=79
    K_IF=80
    K_IGNORE=81
    K_IMMEDIATE=82
    K_IN=83
    K_INDEX=84
    K_INDEXED=85
    K_INITIALLY=86
    K_INNER=87
    K_INSERT=88
    K_INSTEAD=89
    K_INTERSECT=90
    K_INTO=91
    K_IS=92
    K_ISNULL=93
    K_JOIN=94
    K_KEY=95
    K_LEFT=96
    K_LIKE=97
    K_LIMIT=98
    K_MATCH=99
    K_NATURAL=100
    K_NO=101
    K_NOT=102
    K_NOTNULL=103
    K_NULL=104
    K_OF=105
    K_OFFSET=106
    K_ON=107
    K_OR=108
    K_ORDER=109
    K_OUTER=110
    K_PLAN=111
    K_PRAGMA=112
    K_PRIMARY=113
    K_QUERY=114
    K_RAISE=115
    K_RECURSIVE=116
    K_REFERENCES=117
    K_REGEXP=118
    K_REINDEX=119
    K_RELEASE=120
    K_RENAME=121
    K_REPLACE=122
    K_RESTRICT=123
    K_RIGHT=124
    K_ROLLBACK=125
    K_ROW=126
    K_SAVEPOINT=127
    K_SELECT=128
    K_SET=129
    K_TABLE=130
    K_TEMP=131
    K_TEMPORARY=132
    K_THEN=133
    K_TO=134
    K_TRANSACTION=135
    K_TRIGGER=136
    K_UNION=137
    K_UNIQUE=138
    K_UPDATE=139
    K_USING=140
    K_VACUUM=141
    K_VALUES=142
    K_VIEW=143
    K_VIRTUAL=144
    K_WHEN=145
    K_WHERE=146
    K_WITH=147
    K_WITHOUT=148
    IDENTIFIER=149
    NUMERIC_LITERAL=150
    BIND_PARAMETER=151
    STRING_LITERAL=152
    BLOB_LITERAL=153
    SINGLE_LINE_COMMENT=154
    MULTILINE_COMMENT=155
    SPACES=156
    UNEXPECTED_CHAR=157

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._query_statements_list = None # Query_statements_listContext
            self.queries = list() # of Query_statements_listContexts

        def EOF(self):
            return self.getToken(sqlParser.EOF, 0)

        def query_statements_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Query_statements_listContext)
            else:
                return self.getTypedRuleContext(sqlParser.Query_statements_listContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = sqlParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.SCOL) | (1 << sqlParser.K_CREATE) | (1 << sqlParser.K_DELETE) | (1 << sqlParser.K_DROP))) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (sqlParser.K_INSERT - 88)) | (1 << (sqlParser.K_REINDEX - 88)) | (1 << (sqlParser.K_REPLACE - 88)) | (1 << (sqlParser.K_SELECT - 88)) | (1 << (sqlParser.K_UPDATE - 88)) | (1 << (sqlParser.K_VACUUM - 88)) | (1 << (sqlParser.K_WITH - 88)))) != 0):
                self.state = 116
                localctx._query_statements_list = self.query_statements_list()
                localctx.queries.append(localctx._query_statements_list)
                self.state = 121
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 122
            self.match(sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_statements_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._statement_node = None # Statement_nodeContext
            self.query_statements = list() # of Statement_nodeContexts

        def statement_node(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Statement_nodeContext)
            else:
                return self.getTypedRuleContext(sqlParser.Statement_nodeContext,i)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.SCOL)
            else:
                return self.getToken(sqlParser.SCOL, i)

        def getRuleIndex(self):
            return sqlParser.RULE_query_statements_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_statements_list" ):
                listener.enterQuery_statements_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_statements_list" ):
                listener.exitQuery_statements_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_statements_list" ):
                return visitor.visitQuery_statements_list(self)
            else:
                return visitor.visitChildren(self)




    def query_statements_list(self):

        localctx = sqlParser.Query_statements_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_query_statements_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.SCOL:
                self.state = 124
                self.match(sqlParser.SCOL)
                self.state = 129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 130
            localctx._statement_node = self.statement_node()
            localctx.query_statements.append(localctx._statement_node)
            self.state = 139
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 132 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 131
                        self.match(sqlParser.SCOL)
                        self.state = 134 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==sqlParser.SCOL):
                            break

                    self.state = 136
                    localctx._statement_node = self.statement_node()
                    localctx.query_statements.append(localctx._statement_node) 
                self.state = 141
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 145
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 142
                    self.match(sqlParser.SCOL) 
                self.state = 147
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_nodeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return sqlParser.RULE_statement_node

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Reindex_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def reindex_stmt(self):
            return self.getTypedRuleContext(sqlParser.Reindex_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_statement" ):
                listener.enterReindex_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_statement" ):
                listener.exitReindex_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReindex_statement" ):
                return visitor.visitReindex_statement(self)
            else:
                return visitor.visitChildren(self)


    class Drop_table_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def drop_table_stmt(self):
            return self.getTypedRuleContext(sqlParser.Drop_table_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table_statement" ):
                listener.enterDrop_table_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table_statement" ):
                listener.exitDrop_table_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_table_statement" ):
                return visitor.visitDrop_table_statement(self)
            else:
                return visitor.visitChildren(self)


    class Create_table_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def create_table_stmt(self):
            return self.getTypedRuleContext(sqlParser.Create_table_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_statement" ):
                listener.enterCreate_table_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_statement" ):
                listener.exitCreate_table_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table_statement" ):
                return visitor.visitCreate_table_statement(self)
            else:
                return visitor.visitChildren(self)


    class Drop_index_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def drop_index_stmt(self):
            return self.getTypedRuleContext(sqlParser.Drop_index_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_index_statement" ):
                listener.enterDrop_index_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_index_statement" ):
                listener.exitDrop_index_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_index_statement" ):
                return visitor.visitDrop_index_statement(self)
            else:
                return visitor.visitChildren(self)


    class Delete_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def delete_stmt(self):
            return self.getTypedRuleContext(sqlParser.Delete_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement" ):
                return visitor.visitDelete_statement(self)
            else:
                return visitor.visitChildren(self)


    class Create_index_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def create_index_stmt(self):
            return self.getTypedRuleContext(sqlParser.Create_index_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_statement" ):
                listener.enterCreate_index_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_statement" ):
                listener.exitCreate_index_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index_statement" ):
                return visitor.visitCreate_index_statement(self)
            else:
                return visitor.visitChildren(self)


    class Simp_select_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simp_select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Simp_select_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimp_select_statement" ):
                listener.enterSimp_select_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimp_select_statement" ):
                listener.exitSimp_select_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimp_select_statement" ):
                return visitor.visitSimp_select_statement(self)
            else:
                return visitor.visitChildren(self)


    class Vacuum_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vacuum_stmt(self):
            return self.getTypedRuleContext(sqlParser.Vacuum_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_statement" ):
                listener.enterVacuum_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_statement" ):
                listener.exitVacuum_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVacuum_statement" ):
                return visitor.visitVacuum_statement(self)
            else:
                return visitor.visitChildren(self)


    class Insert_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def insert_stmt(self):
            return self.getTypedRuleContext(sqlParser.Insert_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement" ):
                return visitor.visitInsert_statement(self)
            else:
                return visitor.visitChildren(self)


    class Update_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def update_stmt(self):
            return self.getTypedRuleContext(sqlParser.Update_stmtContext,0)

        def update_stmt_limited(self):
            return self.getTypedRuleContext(sqlParser.Update_stmt_limitedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_statement" ):
                return visitor.visitUpdate_statement(self)
            else:
                return visitor.visitChildren(self)


    class Delete_statement_limitedContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def delete_stmt_limited(self):
            return self.getTypedRuleContext(sqlParser.Delete_stmt_limitedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement_limited" ):
                listener.enterDelete_statement_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement_limited" ):
                listener.exitDelete_statement_limited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement_limited" ):
                return visitor.visitDelete_statement_limited(self)
            else:
                return visitor.visitChildren(self)



    def statement_node(self):

        localctx = sqlParser.Statement_nodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement_node)
        try:
            self.state = 160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                localctx = sqlParser.Vacuum_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 148
                self.vacuum_stmt()
                pass

            elif la_ == 2:
                localctx = sqlParser.Create_index_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 149
                self.create_index_stmt()
                pass

            elif la_ == 3:
                localctx = sqlParser.Create_table_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 150
                self.create_table_stmt()
                pass

            elif la_ == 4:
                localctx = sqlParser.Reindex_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 151
                self.reindex_stmt()
                pass

            elif la_ == 5:
                localctx = sqlParser.Update_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 152
                self.update_stmt()
                pass

            elif la_ == 6:
                localctx = sqlParser.Update_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 153
                self.update_stmt_limited()
                pass

            elif la_ == 7:
                localctx = sqlParser.Insert_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 154
                self.insert_stmt()
                pass

            elif la_ == 8:
                localctx = sqlParser.Simp_select_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 155
                self.simp_select_stmt()
                pass

            elif la_ == 9:
                localctx = sqlParser.Drop_index_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 156
                self.drop_index_stmt()
                pass

            elif la_ == 10:
                localctx = sqlParser.Drop_table_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 157
                self.drop_table_stmt()
                pass

            elif la_ == 11:
                localctx = sqlParser.Delete_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 158
                self.delete_stmt()
                pass

            elif la_ == 12:
                localctx = sqlParser.Delete_statement_limitedContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 159
                self.delete_stmt_limited()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_REINDEX(self):
            return self.getToken(sqlParser.K_REINDEX, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_reindex_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_stmt" ):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_stmt" ):
                listener.exitReindex_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReindex_stmt" ):
                return visitor.visitReindex_stmt(self)
            else:
                return visitor.visitChildren(self)




    def reindex_stmt(self):

        localctx = sqlParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 162
            self.match(sqlParser.K_REINDEX)
            self.state = 173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 163
                self.collation_name()

            elif la_ == 2:
                self.state = 167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 164
                    self.database_name()
                    self.state = 165
                    self.match(sqlParser.DOT)


                self.state = 171
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 169
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 170
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_INDEX(self):
            return self.getToken(sqlParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def K_IF(self):
            return self.getToken(sqlParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index_stmt" ):
                return visitor.visitCreate_index_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_index_stmt(self):

        localctx = sqlParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 175
            self.match(sqlParser.K_CREATE)
            self.state = 177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_UNIQUE:
                self.state = 176
                self.match(sqlParser.K_UNIQUE)


            self.state = 179
            self.match(sqlParser.K_INDEX)
            self.state = 183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 180
                self.match(sqlParser.K_IF)
                self.state = 181
                self.match(sqlParser.K_NOT)
                self.state = 182
                self.match(sqlParser.K_EXISTS)


            self.state = 188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 185
                self.database_name()
                self.state = 186
                self.match(sqlParser.DOT)


            self.state = 190
            self.index_name()
            self.state = 191
            self.match(sqlParser.K_ON)
            self.state = 192
            self.table_name()
            self.state = 193
            self.match(sqlParser.OPEN_PAR)
            self.state = 194
            self.indexed_column()
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 195
                self.match(sqlParser.COMMA)
                self.state = 196
                self.indexed_column()
                self.state = 201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 202
            self.match(sqlParser.CLOSE_PAR)
            self.state = 205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 203
                self.match(sqlParser.K_WHERE)
                self.state = 204
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._column_def = None # Column_defContext
            self.columns = list() # of Column_defContexts
            self._table_constraint = None # Table_constraintContext
            self.constraints = list() # of Table_constraintContexts

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_TABLE(self):
            return self.getToken(sqlParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def K_IF(self):
            return self.getToken(sqlParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_defContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_defContext,i)


        def K_TEMP(self):
            return self.getToken(sqlParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(sqlParser.K_TEMPORARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WITHOUT(self):
            return self.getToken(sqlParser.K_WITHOUT, 0)

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_constraintContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table_stmt" ):
                return visitor.visitCreate_table_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_table_stmt(self):

        localctx = sqlParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207
            self.match(sqlParser.K_CREATE)
            self.state = 209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_TEMP or _la==sqlParser.K_TEMPORARY:
                self.state = 208
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_TEMP or _la==sqlParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 211
            self.match(sqlParser.K_TABLE)
            self.state = 215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 212
                self.match(sqlParser.K_IF)
                self.state = 213
                self.match(sqlParser.K_NOT)
                self.state = 214
                self.match(sqlParser.K_EXISTS)


            self.state = 220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 217
                self.database_name()
                self.state = 218
                self.match(sqlParser.DOT)


            self.state = 222
            self.table_name()
            self.state = 246
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.OPEN_PAR]:
                self.state = 223
                self.match(sqlParser.OPEN_PAR)
                self.state = 224
                localctx._column_def = self.column_def()
                localctx.columns.append(localctx._column_def)
                self.state = 229
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 225
                        self.match(sqlParser.COMMA)
                        self.state = 226
                        localctx._column_def = self.column_def()
                        localctx.columns.append(localctx._column_def) 
                    self.state = 231
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 232
                    self.match(sqlParser.COMMA)
                    self.state = 233
                    localctx._table_constraint = self.table_constraint()
                    localctx.constraints.append(localctx._table_constraint)
                    self.state = 238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 239
                self.match(sqlParser.CLOSE_PAR)
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_WITHOUT:
                    self.state = 240
                    self.match(sqlParser.K_WITHOUT)
                    self.state = 241
                    self.match(sqlParser.IDENTIFIER)


                pass
            elif token in [sqlParser.K_AS]:
                self.state = 244
                self.match(sqlParser.K_AS)
                self.state = 245
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simp_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._result_column_1 = None # Result_column_1Context
            self.columns = list() # of Result_column_1Contexts
            self.where = None # Expr1Context

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def result_column_1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Result_column_1Context)
            else:
                return self.getTypedRuleContext(sqlParser.Result_column_1Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def expr1(self):
            return self.getTypedRuleContext(sqlParser.Expr1Context,0)


        def getRuleIndex(self):
            return sqlParser.RULE_simp_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimp_select_stmt" ):
                listener.enterSimp_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimp_select_stmt" ):
                listener.exitSimp_select_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimp_select_stmt" ):
                return visitor.visitSimp_select_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simp_select_stmt(self):

        localctx = sqlParser.Simp_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_simp_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(sqlParser.K_SELECT)
            self.state = 250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 249
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ALL or _la==sqlParser.K_DISTINCT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 252
            localctx._result_column_1 = self.result_column_1()
            localctx.columns.append(localctx._result_column_1)
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 253
                self.match(sqlParser.COMMA)
                self.state = 254
                localctx._result_column_1 = self.result_column_1()
                localctx.columns.append(localctx._result_column_1)
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_FROM:
                self.state = 260
                self.match(sqlParser.K_FROM)
                self.state = 261
                self.table_name()


            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 264
                self.match(sqlParser.K_WHERE)
                self.state = 265
                localctx.where = self.expr1(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_column_1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(sqlParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_result_column_1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column_1" ):
                listener.enterResult_column_1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column_1" ):
                listener.exitResult_column_1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_column_1" ):
                return visitor.visitResult_column_1(self)
            else:
                return visitor.visitChildren(self)




    def result_column_1(self):

        localctx = sqlParser.Result_column_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_result_column_1)
        try:
            self.state = 270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 268
                self.match(sqlParser.STAR)
                pass
            elif token in [sqlParser.OPEN_PAR, sqlParser.PLUS, sqlParser.MINUS, sqlParser.TILDE, sqlParser.K_ABORT, sqlParser.K_ACTION, sqlParser.K_ADD, sqlParser.K_AFTER, sqlParser.K_ALL, sqlParser.K_ALTER, sqlParser.K_ANALYZE, sqlParser.K_AND, sqlParser.K_AS, sqlParser.K_ASC, sqlParser.K_ATTACH, sqlParser.K_AUTOINCREMENT, sqlParser.K_BEFORE, sqlParser.K_BEGIN, sqlParser.K_BETWEEN, sqlParser.K_BY, sqlParser.K_CASCADE, sqlParser.K_CASE, sqlParser.K_CAST, sqlParser.K_CHECK, sqlParser.K_COLLATE, sqlParser.K_COLUMN, sqlParser.K_COMMIT, sqlParser.K_CONFLICT, sqlParser.K_CONSTRAINT, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_CURRENT_DATE, sqlParser.K_CURRENT_TIME, sqlParser.K_CURRENT_TIMESTAMP, sqlParser.K_DATABASE, sqlParser.K_DEFAULT, sqlParser.K_DEFERRABLE, sqlParser.K_DEFERRED, sqlParser.K_DELETE, sqlParser.K_DESC, sqlParser.K_DETACH, sqlParser.K_DISTINCT, sqlParser.K_DROP, sqlParser.K_EACH, sqlParser.K_ELSE, sqlParser.K_END, sqlParser.K_ESCAPE, sqlParser.K_EXCEPT, sqlParser.K_EXCLUSIVE, sqlParser.K_EXISTS, sqlParser.K_EXPLAIN, sqlParser.K_FAIL, sqlParser.K_FOR, sqlParser.K_FOREIGN, sqlParser.K_FROM, sqlParser.K_FULL, sqlParser.K_GLOB, sqlParser.K_GROUP, sqlParser.K_HAVING, sqlParser.K_IF, sqlParser.K_IGNORE, sqlParser.K_IMMEDIATE, sqlParser.K_IN, sqlParser.K_INDEX, sqlParser.K_INDEXED, sqlParser.K_INITIALLY, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INSTEAD, sqlParser.K_INTERSECT, sqlParser.K_INTO, sqlParser.K_IS, sqlParser.K_ISNULL, sqlParser.K_JOIN, sqlParser.K_KEY, sqlParser.K_LEFT, sqlParser.K_LIKE, sqlParser.K_LIMIT, sqlParser.K_MATCH, sqlParser.K_NATURAL, sqlParser.K_NO, sqlParser.K_NOT, sqlParser.K_NOTNULL, sqlParser.K_NULL, sqlParser.K_OF, sqlParser.K_OFFSET, sqlParser.K_ON, sqlParser.K_OR, sqlParser.K_ORDER, sqlParser.K_OUTER, sqlParser.K_PLAN, sqlParser.K_PRAGMA, sqlParser.K_PRIMARY, sqlParser.K_QUERY, sqlParser.K_RAISE, sqlParser.K_RECURSIVE, sqlParser.K_REFERENCES, sqlParser.K_REGEXP, sqlParser.K_REINDEX, sqlParser.K_RELEASE, sqlParser.K_RENAME, sqlParser.K_REPLACE, sqlParser.K_RESTRICT, sqlParser.K_RIGHT, sqlParser.K_ROLLBACK, sqlParser.K_ROW, sqlParser.K_SAVEPOINT, sqlParser.K_SELECT, sqlParser.K_SET, sqlParser.K_TABLE, sqlParser.K_TEMP, sqlParser.K_TEMPORARY, sqlParser.K_THEN, sqlParser.K_TO, sqlParser.K_TRANSACTION, sqlParser.K_TRIGGER, sqlParser.K_UNION, sqlParser.K_UNIQUE, sqlParser.K_UPDATE, sqlParser.K_USING, sqlParser.K_VACUUM, sqlParser.K_VALUES, sqlParser.K_VIEW, sqlParser.K_VIRTUAL, sqlParser.K_WHEN, sqlParser.K_WHERE, sqlParser.K_WITH, sqlParser.K_WITHOUT, sqlParser.IDENTIFIER, sqlParser.NUMERIC_LITERAL, sqlParser.BIND_PARAMETER, sqlParser.STRING_LITERAL, sqlParser.BLOB_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 269
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Some_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(sqlParser.ASSIGN, 0)

        def LT(self):
            return self.getToken(sqlParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(sqlParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(sqlParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(sqlParser.GT_EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(sqlParser.NOT_EQ1, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_some_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSome_operator" ):
                listener.enterSome_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSome_operator" ):
                listener.exitSome_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSome_operator" ):
                return visitor.visitSome_operator(self)
            else:
                return visitor.visitChildren(self)




    def some_operator(self):

        localctx = sqlParser.Some_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_some_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.ASSIGN) | (1 << sqlParser.LT) | (1 << sqlParser.LT_EQ) | (1 << sqlParser.GT) | (1 << sqlParser.GT_EQ) | (1 << sqlParser.NOT_EQ1))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(sqlParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(sqlParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.DOT)
            else:
                return self.getToken(sqlParser.DOT, i)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def some_operator(self):
            return self.getTypedRuleContext(sqlParser.Some_operatorContext,0)


        def expr1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Expr1Context)
            else:
                return self.getTypedRuleContext(sqlParser.Expr1Context,i)


        def getRuleIndex(self):
            return sqlParser.RULE_expr1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr1" ):
                listener.enterExpr1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr1" ):
                listener.exitExpr1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr1" ):
                return visitor.visitExpr1(self)
            else:
                return visitor.visitChildren(self)



    def expr1(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = sqlParser.Expr1Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_expr1, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 275
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 276
                self.match(sqlParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 285
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 280
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                    if la_ == 1:
                        self.state = 277
                        self.database_name()
                        self.state = 278
                        self.match(sqlParser.DOT)


                    self.state = 282
                    self.table_name()
                    self.state = 283
                    self.match(sqlParser.DOT)


                self.state = 287
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 288
                self.some_operator()
                self.state = 289
                self.expr1(2)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = sqlParser.Expr1Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expr1)
                    self.state = 293
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 294
                    self.some_operator()
                    self.state = 295
                    self.expr1(2) 
                self.state = 301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PRIMARY(self):
            return self.getToken(sqlParser.K_PRIMARY, 0)

        def K_KEY(self):
            return self.getToken(sqlParser.K_KEY, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(sqlParser.Conflict_clauseContext,0)


        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def K_CHECK(self):
            return self.getToken(sqlParser.K_CHECK, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(sqlParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(sqlParser.NameContext,0)


        def signed_number(self):
            return self.getTypedRuleContext(sqlParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(sqlParser.Literal_valueContext,0)


        def K_AUTOINCREMENT(self):
            return self.getToken(sqlParser.K_AUTOINCREMENT, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_constraint" ):
                return visitor.visitColumn_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_constraint(self):

        localctx = sqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_CONSTRAINT:
                self.state = 302
                self.match(sqlParser.K_CONSTRAINT)
                self.state = 303
                self.name()


            self.state = 339
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_PRIMARY]:
                self.state = 306
                self.match(sqlParser.K_PRIMARY)
                self.state = 307
                self.match(sqlParser.K_KEY)
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_ASC or _la==sqlParser.K_DESC:
                    self.state = 308
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.K_ASC or _la==sqlParser.K_DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 311
                self.conflict_clause()
                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_AUTOINCREMENT:
                    self.state = 312
                    self.match(sqlParser.K_AUTOINCREMENT)


                pass
            elif token in [sqlParser.K_NOT, sqlParser.K_NULL]:
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_NOT:
                    self.state = 315
                    self.match(sqlParser.K_NOT)


                self.state = 318
                self.match(sqlParser.K_NULL)
                self.state = 319
                self.conflict_clause()
                pass
            elif token in [sqlParser.K_UNIQUE]:
                self.state = 320
                self.match(sqlParser.K_UNIQUE)
                self.state = 321
                self.conflict_clause()
                pass
            elif token in [sqlParser.K_CHECK]:
                self.state = 322
                self.match(sqlParser.K_CHECK)
                self.state = 323
                self.match(sqlParser.OPEN_PAR)
                self.state = 324
                self.expr(0)
                self.state = 325
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.K_DEFAULT]:
                self.state = 327
                self.match(sqlParser.K_DEFAULT)
                self.state = 334
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 328
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 329
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 330
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 331
                    self.expr(0)
                    self.state = 332
                    self.match(sqlParser.CLOSE_PAR)
                    pass


                pass
            elif token in [sqlParser.K_COLLATE]:
                self.state = 336
                self.match(sqlParser.K_COLLATE)
                self.state = 337
                self.collation_name()
                pass
            elif token in [sqlParser.K_REFERENCES]:
                self.state = 338
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_REFERENCES(self):
            return self.getToken(sqlParser.K_REFERENCES, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(sqlParser.Foreign_tableContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_DEFERRABLE(self):
            return self.getToken(sqlParser.K_DEFERRABLE, 0)

        def K_ON(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_ON)
            else:
                return self.getToken(sqlParser.K_ON, i)

        def K_MATCH(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_MATCH)
            else:
                return self.getToken(sqlParser.K_MATCH, i)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.NameContext)
            else:
                return self.getTypedRuleContext(sqlParser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_DELETE(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_DELETE)
            else:
                return self.getToken(sqlParser.K_DELETE, i)

        def K_UPDATE(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_UPDATE)
            else:
                return self.getToken(sqlParser.K_UPDATE, i)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_INITIALLY(self):
            return self.getToken(sqlParser.K_INITIALLY, 0)

        def K_DEFERRED(self):
            return self.getToken(sqlParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(sqlParser.K_IMMEDIATE, 0)

        def K_SET(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_SET)
            else:
                return self.getToken(sqlParser.K_SET, i)

        def K_NULL(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_NULL)
            else:
                return self.getToken(sqlParser.K_NULL, i)

        def K_DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_DEFAULT)
            else:
                return self.getToken(sqlParser.K_DEFAULT, i)

        def K_CASCADE(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_CASCADE)
            else:
                return self.getToken(sqlParser.K_CASCADE, i)

        def K_RESTRICT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_RESTRICT)
            else:
                return self.getToken(sqlParser.K_RESTRICT, i)

        def K_NO(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_NO)
            else:
                return self.getToken(sqlParser.K_NO, i)

        def K_ACTION(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_ACTION)
            else:
                return self.getToken(sqlParser.K_ACTION, i)

        def getRuleIndex(self):
            return sqlParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeign_key_clause" ):
                return visitor.visitForeign_key_clause(self)
            else:
                return visitor.visitChildren(self)




    def foreign_key_clause(self):

        localctx = sqlParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(sqlParser.K_REFERENCES)
            self.state = 342
            self.foreign_table()
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 343
                self.match(sqlParser.OPEN_PAR)
                self.state = 344
                self.column_name()
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 345
                    self.match(sqlParser.COMMA)
                    self.state = 346
                    self.column_name()
                    self.state = 351
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 352
                self.match(sqlParser.CLOSE_PAR)


            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.K_MATCH or _la==sqlParser.K_ON:
                self.state = 370
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_ON]:
                    self.state = 356
                    self.match(sqlParser.K_ON)
                    self.state = 357
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.K_DELETE or _la==sqlParser.K_UPDATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 366
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                    if la_ == 1:
                        self.state = 358
                        self.match(sqlParser.K_SET)
                        self.state = 359
                        self.match(sqlParser.K_NULL)
                        pass

                    elif la_ == 2:
                        self.state = 360
                        self.match(sqlParser.K_SET)
                        self.state = 361
                        self.match(sqlParser.K_DEFAULT)
                        pass

                    elif la_ == 3:
                        self.state = 362
                        self.match(sqlParser.K_CASCADE)
                        pass

                    elif la_ == 4:
                        self.state = 363
                        self.match(sqlParser.K_RESTRICT)
                        pass

                    elif la_ == 5:
                        self.state = 364
                        self.match(sqlParser.K_NO)
                        self.state = 365
                        self.match(sqlParser.K_ACTION)
                        pass


                    pass
                elif token in [sqlParser.K_MATCH]:
                    self.state = 368
                    self.match(sqlParser.K_MATCH)
                    self.state = 369
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_NOT:
                    self.state = 377
                    self.match(sqlParser.K_NOT)


                self.state = 380
                self.match(sqlParser.K_DEFERRABLE)
                self.state = 385
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 381
                    self.match(sqlParser.K_INITIALLY)
                    self.state = 382
                    self.match(sqlParser.K_DEFERRED)

                elif la_ == 2:
                    self.state = 383
                    self.match(sqlParser.K_INITIALLY)
                    self.state = 384
                    self.match(sqlParser.K_IMMEDIATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(sqlParser.Conflict_clauseContext,0)


        def K_CHECK(self):
            return self.getToken(sqlParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_FOREIGN(self):
            return self.getToken(sqlParser.K_FOREIGN, 0)

        def K_KEY(self):
            return self.getToken(sqlParser.K_KEY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(sqlParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(sqlParser.NameContext,0)


        def K_PRIMARY(self):
            return self.getToken(sqlParser.K_PRIMARY, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_constraint" ):
                return visitor.visitTable_constraint(self)
            else:
                return visitor.visitChildren(self)




    def table_constraint(self):

        localctx = sqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_CONSTRAINT:
                self.state = 389
                self.match(sqlParser.K_CONSTRAINT)
                self.state = 390
                self.name()


            self.state = 429
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_PRIMARY, sqlParser.K_UNIQUE]:
                self.state = 396
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_PRIMARY]:
                    self.state = 393
                    self.match(sqlParser.K_PRIMARY)
                    self.state = 394
                    self.match(sqlParser.K_KEY)
                    pass
                elif token in [sqlParser.K_UNIQUE]:
                    self.state = 395
                    self.match(sqlParser.K_UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 398
                self.match(sqlParser.OPEN_PAR)
                self.state = 399
                self.indexed_column()
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 400
                    self.match(sqlParser.COMMA)
                    self.state = 401
                    self.indexed_column()
                    self.state = 406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 407
                self.match(sqlParser.CLOSE_PAR)
                self.state = 408
                self.conflict_clause()
                pass
            elif token in [sqlParser.K_CHECK]:
                self.state = 410
                self.match(sqlParser.K_CHECK)
                self.state = 411
                self.match(sqlParser.OPEN_PAR)
                self.state = 412
                self.expr(0)
                self.state = 413
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.K_FOREIGN]:
                self.state = 415
                self.match(sqlParser.K_FOREIGN)
                self.state = 416
                self.match(sqlParser.K_KEY)
                self.state = 417
                self.match(sqlParser.OPEN_PAR)
                self.state = 418
                self.column_name()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 419
                    self.match(sqlParser.COMMA)
                    self.state = 420
                    self.column_name()
                    self.state = 425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 426
                self.match(sqlParser.CLOSE_PAR)
                self.state = 427
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(sqlParser.Type_nameContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def" ):
                return visitor.visitColumn_def(self)
            else:
                return visitor.visitChildren(self)




    def column_def(self):

        localctx = sqlParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.column_name()
            self.state = 433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 432
                self.type_name()


            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.K_CHECK) | (1 << sqlParser.K_COLLATE) | (1 << sqlParser.K_CONSTRAINT) | (1 << sqlParser.K_DEFAULT))) != 0) or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (sqlParser.K_NOT - 102)) | (1 << (sqlParser.K_NULL - 102)) | (1 << (sqlParser.K_PRIMARY - 102)) | (1 << (sqlParser.K_REFERENCES - 102)) | (1 << (sqlParser.K_UNIQUE - 102)))) != 0):
                self.state = 435
                self.column_constraint()
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.NameContext)
            else:
                return self.getTypedRuleContext(sqlParser.NameContext,i)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def signed_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(sqlParser.Signed_numberContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(sqlParser.COMMA, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name" ):
                return visitor.visitType_name(self)
            else:
                return visitor.visitChildren(self)




    def type_name(self):

        localctx = sqlParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 441
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 444 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

            self.state = 456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 446
                self.match(sqlParser.OPEN_PAR)
                self.state = 447
                self.signed_number()
                self.state = 448
                self.match(sqlParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 450
                self.match(sqlParser.OPEN_PAR)
                self.state = 451
                self.signed_number()
                self.state = 452
                self.match(sqlParser.COMMA)
                self.state = 453
                self.signed_number()
                self.state = 454
                self.match(sqlParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexed_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_indexed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexed_column" ):
                listener.enterIndexed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexed_column" ):
                listener.exitIndexed_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexed_column" ):
                return visitor.visitIndexed_column(self)
            else:
                return visitor.visitChildren(self)




    def indexed_column(self):

        localctx = sqlParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.column_name()
            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_COLLATE:
                self.state = 459
                self.match(sqlParser.K_COLLATE)
                self.state = 460
                self.collation_name()


            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ASC or _la==sqlParser.K_DESC:
                self.state = 463
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ASC or _la==sqlParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(sqlParser.Select_coreContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_UNION(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_UNION)
            else:
                return self.getToken(sqlParser.K_UNION, i)

        def K_INTERSECT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_INTERSECT)
            else:
                return self.getToken(sqlParser.K_INTERSECT, i)

        def K_EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_EXCEPT)
            else:
                return self.getToken(sqlParser.K_EXCEPT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def K_ALL(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_ALL)
            else:
                return self.getToken(sqlParser.K_ALL, i)

        def getRuleIndex(self):
            return sqlParser.RULE_compound_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_select_stmt" ):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_select_stmt" ):
                listener.exitCompound_select_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_select_stmt" ):
                return visitor.visitCompound_select_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_select_stmt(self):

        localctx = sqlParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 466
                self.with_clause()


            self.state = 469
            self.select_core()
            self.state = 479 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 476
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_UNION]:
                    self.state = 470
                    self.match(sqlParser.K_UNION)
                    self.state = 472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_ALL:
                        self.state = 471
                        self.match(sqlParser.K_ALL)


                    pass
                elif token in [sqlParser.K_INTERSECT]:
                    self.state = 474
                    self.match(sqlParser.K_INTERSECT)
                    pass
                elif token in [sqlParser.K_EXCEPT]:
                    self.state = 475
                    self.match(sqlParser.K_EXCEPT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 478
                self.select_core()
                self.state = 481 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==sqlParser.K_EXCEPT or _la==sqlParser.K_INTERSECT or _la==sqlParser.K_UNION):
                    break

            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 483
                self.match(sqlParser.K_ORDER)
                self.state = 484
                self.match(sqlParser.K_BY)
                self.state = 485
                self.ordering_term()
                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 486
                    self.match(sqlParser.COMMA)
                    self.state = 487
                    self.ordering_term()
                    self.state = 492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 495
                self.match(sqlParser.K_LIMIT)
                self.state = 496
                self.expr(0)
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 497
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 498
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factored_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._select_core = None # Select_coreContext
            self.select_parts = list() # of Select_coreContexts
            self._compound_operator = None # Compound_operatorContext
            self.operators = list() # of Compound_operatorContexts

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(sqlParser.Select_coreContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Compound_operatorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_factored_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactored_select_stmt" ):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactored_select_stmt" ):
                listener.exitFactored_select_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactored_select_stmt" ):
                return visitor.visitFactored_select_stmt(self)
            else:
                return visitor.visitChildren(self)




    def factored_select_stmt(self):

        localctx = sqlParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_factored_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 503
                self.with_clause()


            self.state = 506
            localctx._select_core = self.select_core()
            localctx.select_parts.append(localctx._select_core)
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.K_EXCEPT or _la==sqlParser.K_INTERSECT or _la==sqlParser.K_UNION:
                self.state = 507
                localctx._compound_operator = self.compound_operator()
                localctx.operators.append(localctx._compound_operator)
                self.state = 508
                localctx._select_core = self.select_core()
                localctx.select_parts.append(localctx._select_core)
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 515
                self.match(sqlParser.K_ORDER)
                self.state = 516
                self.match(sqlParser.K_BY)
                self.state = 517
                self.ordering_term()
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 518
                    self.match(sqlParser.COMMA)
                    self.state = 519
                    self.ordering_term()
                    self.state = 524
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 527
                self.match(sqlParser.K_LIMIT)
                self.state = 528
                self.expr(0)
                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 529
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 530
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(sqlParser.Select_coreContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_simple_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_stmt" ):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_stmt" ):
                listener.exitSimple_select_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_select_stmt" ):
                return visitor.visitSimple_select_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_select_stmt(self):

        localctx = sqlParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 535
                self.with_clause()


            self.state = 538
            self.select_core()
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 539
                self.match(sqlParser.K_ORDER)
                self.state = 540
                self.match(sqlParser.K_BY)
                self.state = 541
                self.ordering_term()
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 542
                    self.match(sqlParser.COMMA)
                    self.state = 543
                    self.ordering_term()
                    self.state = 548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 551
                self.match(sqlParser.K_LIMIT)
                self.state = 552
                self.expr(0)
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 553
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 554
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Select_or_valuesContext)
            else:
                return self.getTypedRuleContext(sqlParser.Select_or_valuesContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_stmt" ):
                return visitor.visitSelect_stmt(self)
            else:
                return visitor.visitChildren(self)




    def select_stmt(self):

        localctx = sqlParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 559
                self.with_clause()


            self.state = 562
            self.select_or_values()
            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.K_EXCEPT or _la==sqlParser.K_INTERSECT or _la==sqlParser.K_UNION:
                self.state = 563
                self.compound_operator()
                self.state = 564
                self.select_or_values()
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 571
                self.match(sqlParser.K_ORDER)
                self.state = 572
                self.match(sqlParser.K_BY)
                self.state = 573
                self.ordering_term()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 574
                    self.match(sqlParser.COMMA)
                    self.state = 575
                    self.ordering_term()
                    self.state = 580
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 583
                self.match(sqlParser.K_LIMIT)
                self.state = 584
                self.expr(0)
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 585
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 586
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_or_valuesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return sqlParser.RULE_select_or_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_or_values" ):
                listener.enterSelect_or_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_or_values" ):
                listener.exitSelect_or_values(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_or_values" ):
                return visitor.visitSelect_or_values(self)
            else:
                return visitor.visitChildren(self)




    def select_or_values(self):

        localctx = sqlParser.Select_or_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_select_or_values)
        self._la = 0 # Token type
        try:
            self.state = 665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 591
                self.match(sqlParser.K_SELECT)
                self.state = 593
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 592
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.K_ALL or _la==sqlParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 595
                self.result_column()
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 596
                    self.match(sqlParser.COMMA)
                    self.state = 597
                    self.result_column()
                    self.state = 602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_FROM:
                    self.state = 603
                    self.match(sqlParser.K_FROM)
                    self.state = 613
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                    if la_ == 1:
                        self.state = 604
                        self.table_or_subquery()
                        self.state = 609
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==sqlParser.COMMA:
                            self.state = 605
                            self.match(sqlParser.COMMA)
                            self.state = 606
                            self.table_or_subquery()
                            self.state = 611
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 612
                        self.join_clause()
                        pass




                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_WHERE:
                    self.state = 617
                    self.match(sqlParser.K_WHERE)
                    self.state = 618
                    self.expr(0)


                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_GROUP:
                    self.state = 621
                    self.match(sqlParser.K_GROUP)
                    self.state = 622
                    self.match(sqlParser.K_BY)
                    self.state = 623
                    self.expr(0)
                    self.state = 628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 624
                        self.match(sqlParser.COMMA)
                        self.state = 625
                        self.expr(0)
                        self.state = 630
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_HAVING:
                        self.state = 631
                        self.match(sqlParser.K_HAVING)
                        self.state = 632
                        self.expr(0)




                pass
            elif token in [sqlParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 637
                self.match(sqlParser.K_VALUES)
                self.state = 638
                self.match(sqlParser.OPEN_PAR)
                self.state = 639
                self.expr(0)
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 640
                    self.match(sqlParser.COMMA)
                    self.state = 641
                    self.expr(0)
                    self.state = 646
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 647
                self.match(sqlParser.CLOSE_PAR)
                self.state = 662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 648
                    self.match(sqlParser.COMMA)
                    self.state = 649
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 650
                    self.expr(0)
                    self.state = 655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 651
                        self.match(sqlParser.COMMA)
                        self.state = 652
                        self.expr(0)
                        self.state = 657
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 658
                    self.match(sqlParser.CLOSE_PAR)
                    self.state = 664
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_VACUUM(self):
            return self.getToken(sqlParser.K_VACUUM, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_vacuum_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_stmt" ):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_stmt" ):
                listener.exitVacuum_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVacuum_stmt" ):
                return visitor.visitVacuum_stmt(self)
            else:
                return visitor.visitChildren(self)




    def vacuum_stmt(self):

        localctx = sqlParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_vacuum_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(sqlParser.K_VACUUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expr1 = None # Expr1Context
            self.values = list() # of Expr1Contexts
            self.where = None # Expr1Context

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(sqlParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.ASSIGN)
            else:
                return self.getToken(sqlParser.ASSIGN, i)

        def expr1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Expr1Context)
            else:
                return self.getTypedRuleContext(sqlParser.Expr1Context,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt" ):
                return visitor.visitUpdate_stmt(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt(self):

        localctx = sqlParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 669
                self.with_clause()


            self.state = 672
            self.match(sqlParser.K_UPDATE)
            self.state = 683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 673
                self.match(sqlParser.K_OR)
                self.state = 674
                self.match(sqlParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 675
                self.match(sqlParser.K_OR)
                self.state = 676
                self.match(sqlParser.K_ABORT)

            elif la_ == 3:
                self.state = 677
                self.match(sqlParser.K_OR)
                self.state = 678
                self.match(sqlParser.K_REPLACE)

            elif la_ == 4:
                self.state = 679
                self.match(sqlParser.K_OR)
                self.state = 680
                self.match(sqlParser.K_FAIL)

            elif la_ == 5:
                self.state = 681
                self.match(sqlParser.K_OR)
                self.state = 682
                self.match(sqlParser.K_IGNORE)


            self.state = 685
            self.qualified_table_name()
            self.state = 686
            self.match(sqlParser.K_SET)
            self.state = 687
            self.column_name()
            self.state = 688
            self.match(sqlParser.ASSIGN)
            self.state = 689
            localctx._expr1 = self.expr1(0)
            localctx.values.append(localctx._expr1)
            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 690
                self.match(sqlParser.COMMA)
                self.state = 691
                self.column_name()
                self.state = 692
                self.match(sqlParser.ASSIGN)
                self.state = 693
                localctx._expr1 = self.expr1(0)
                localctx.values.append(localctx._expr1)
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 700
                self.match(sqlParser.K_WHERE)
                self.state = 701
                localctx.where = self.expr1(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(sqlParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.ASSIGN)
            else:
                return self.getToken(sqlParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_update_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt_limited" ):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt_limited" ):
                listener.exitUpdate_stmt_limited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt_limited" ):
                return visitor.visitUpdate_stmt_limited(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt_limited(self):

        localctx = sqlParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 704
                self.with_clause()


            self.state = 707
            self.match(sqlParser.K_UPDATE)
            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 708
                self.match(sqlParser.K_OR)
                self.state = 709
                self.match(sqlParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 710
                self.match(sqlParser.K_OR)
                self.state = 711
                self.match(sqlParser.K_ABORT)

            elif la_ == 3:
                self.state = 712
                self.match(sqlParser.K_OR)
                self.state = 713
                self.match(sqlParser.K_REPLACE)

            elif la_ == 4:
                self.state = 714
                self.match(sqlParser.K_OR)
                self.state = 715
                self.match(sqlParser.K_FAIL)

            elif la_ == 5:
                self.state = 716
                self.match(sqlParser.K_OR)
                self.state = 717
                self.match(sqlParser.K_IGNORE)


            self.state = 720
            self.qualified_table_name()
            self.state = 721
            self.match(sqlParser.K_SET)
            self.state = 722
            self.column_name()
            self.state = 723
            self.match(sqlParser.ASSIGN)
            self.state = 724
            self.expr(0)
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 725
                self.match(sqlParser.COMMA)
                self.state = 726
                self.column_name()
                self.state = 727
                self.match(sqlParser.ASSIGN)
                self.state = 728
                self.expr(0)
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 735
                self.match(sqlParser.K_WHERE)
                self.state = 736
                self.expr(0)


            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT or _la==sqlParser.K_ORDER:
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_ORDER:
                    self.state = 739
                    self.match(sqlParser.K_ORDER)
                    self.state = 740
                    self.match(sqlParser.K_BY)
                    self.state = 741
                    self.ordering_term()
                    self.state = 746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 742
                        self.match(sqlParser.COMMA)
                        self.state = 743
                        self.ordering_term()
                        self.state = 748
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 751
                self.match(sqlParser.K_LIMIT)
                self.state = 752
                self.expr(0)
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 753
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 754
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INTO(self):
            return self.getToken(sqlParser.K_INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_INSERT(self):
            return self.getToken(sqlParser.K_INSERT, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def expr1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Expr1Context)
            else:
                return self.getTypedRuleContext(sqlParser.Expr1Context,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_stmt" ):
                return visitor.visitInsert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def insert_stmt(self):

        localctx = sqlParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 759
                self.with_clause()


            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 762
                self.match(sqlParser.K_INSERT)
                pass

            elif la_ == 2:
                self.state = 763
                self.match(sqlParser.K_REPLACE)
                pass

            elif la_ == 3:
                self.state = 764
                self.match(sqlParser.K_INSERT)
                self.state = 765
                self.match(sqlParser.K_OR)
                self.state = 766
                self.match(sqlParser.K_REPLACE)
                pass

            elif la_ == 4:
                self.state = 767
                self.match(sqlParser.K_INSERT)
                self.state = 768
                self.match(sqlParser.K_OR)
                self.state = 769
                self.match(sqlParser.K_ROLLBACK)
                pass

            elif la_ == 5:
                self.state = 770
                self.match(sqlParser.K_INSERT)
                self.state = 771
                self.match(sqlParser.K_OR)
                self.state = 772
                self.match(sqlParser.K_ABORT)
                pass

            elif la_ == 6:
                self.state = 773
                self.match(sqlParser.K_INSERT)
                self.state = 774
                self.match(sqlParser.K_OR)
                self.state = 775
                self.match(sqlParser.K_FAIL)
                pass

            elif la_ == 7:
                self.state = 776
                self.match(sqlParser.K_INSERT)
                self.state = 777
                self.match(sqlParser.K_OR)
                self.state = 778
                self.match(sqlParser.K_IGNORE)
                pass


            self.state = 781
            self.match(sqlParser.K_INTO)
            self.state = 785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 782
                self.database_name()
                self.state = 783
                self.match(sqlParser.DOT)


            self.state = 787
            self.table_name()
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 788
                self.match(sqlParser.OPEN_PAR)
                self.state = 789
                self.column_name()
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 790
                    self.match(sqlParser.COMMA)
                    self.state = 791
                    self.column_name()
                    self.state = 796
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 797
                self.match(sqlParser.CLOSE_PAR)


            self.state = 832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 801
                self.match(sqlParser.K_VALUES)
                self.state = 802
                self.match(sqlParser.OPEN_PAR)
                self.state = 803
                self.expr1(0)
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 804
                    self.match(sqlParser.COMMA)
                    self.state = 805
                    self.expr1(0)
                    self.state = 810
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 811
                self.match(sqlParser.CLOSE_PAR)
                self.state = 826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 812
                    self.match(sqlParser.COMMA)
                    self.state = 813
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 814
                    self.expr1(0)
                    self.state = 819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 815
                        self.match(sqlParser.COMMA)
                        self.state = 816
                        self.expr1(0)
                        self.state = 821
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 822
                    self.match(sqlParser.CLOSE_PAR)
                    self.state = 828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 829
                self.select_stmt()
                pass

            elif la_ == 3:
                self.state = 830
                self.match(sqlParser.K_DEFAULT)
                self.state = 831
                self.match(sqlParser.K_VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(sqlParser.K_DROP, 0)

        def K_INDEX(self):
            return self.getToken(sqlParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_IF(self):
            return self.getToken(sqlParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_drop_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_index_stmt" ):
                listener.enterDrop_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_index_stmt" ):
                listener.exitDrop_index_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_index_stmt" ):
                return visitor.visitDrop_index_stmt(self)
            else:
                return visitor.visitChildren(self)




    def drop_index_stmt(self):

        localctx = sqlParser.Drop_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_drop_index_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(sqlParser.K_DROP)
            self.state = 835
            self.match(sqlParser.K_INDEX)
            self.state = 838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 836
                self.match(sqlParser.K_IF)
                self.state = 837
                self.match(sqlParser.K_EXISTS)


            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 840
                self.database_name()
                self.state = 841
                self.match(sqlParser.DOT)


            self.state = 845
            self.index_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(sqlParser.K_DROP, 0)

        def K_TABLE(self):
            return self.getToken(sqlParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_IF(self):
            return self.getToken(sqlParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_drop_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table_stmt" ):
                listener.enterDrop_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table_stmt" ):
                listener.exitDrop_table_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_table_stmt" ):
                return visitor.visitDrop_table_stmt(self)
            else:
                return visitor.visitChildren(self)




    def drop_table_stmt(self):

        localctx = sqlParser.Drop_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_drop_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.match(sqlParser.K_DROP)
            self.state = 848
            self.match(sqlParser.K_TABLE)
            self.state = 851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 849
                self.match(sqlParser.K_IF)
                self.state = 850
                self.match(sqlParser.K_EXISTS)


            self.state = 856
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 853
                self.database_name()
                self.state = 854
                self.match(sqlParser.DOT)


            self.state = 858
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # Expr1Context

        def K_DELETE(self):
            return self.getToken(sqlParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(sqlParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def expr1(self):
            return self.getTypedRuleContext(sqlParser.Expr1Context,0)


        def getRuleIndex(self):
            return sqlParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_stmt" ):
                return visitor.visitDelete_stmt(self)
            else:
                return visitor.visitChildren(self)




    def delete_stmt(self):

        localctx = sqlParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 860
                self.with_clause()


            self.state = 863
            self.match(sqlParser.K_DELETE)
            self.state = 864
            self.match(sqlParser.K_FROM)
            self.state = 865
            self.qualified_table_name()
            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 866
                self.match(sqlParser.K_WHERE)
                self.state = 867
                localctx.where = self.expr1(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(sqlParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(sqlParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_delete_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt_limited" ):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt_limited" ):
                listener.exitDelete_stmt_limited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_stmt_limited" ):
                return visitor.visitDelete_stmt_limited(self)
            else:
                return visitor.visitChildren(self)




    def delete_stmt_limited(self):

        localctx = sqlParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_delete_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 870
                self.with_clause()


            self.state = 873
            self.match(sqlParser.K_DELETE)
            self.state = 874
            self.match(sqlParser.K_FROM)
            self.state = 875
            self.qualified_table_name()
            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 876
                self.match(sqlParser.K_WHERE)
                self.state = 877
                self.expr(0)


            self.state = 898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT or _la==sqlParser.K_ORDER:
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_ORDER:
                    self.state = 880
                    self.match(sqlParser.K_ORDER)
                    self.state = 881
                    self.match(sqlParser.K_BY)
                    self.state = 882
                    self.ordering_term()
                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 883
                        self.match(sqlParser.COMMA)
                        self.state = 884
                        self.ordering_term()
                        self.state = 889
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 892
                self.match(sqlParser.K_LIMIT)
                self.state = 893
                self.expr(0)
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 894
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 895
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def K_INDEXED(self):
            return self.getToken(sqlParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_qualified_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_table_name" ):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_table_name" ):
                listener.exitQualified_table_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualified_table_name" ):
                return visitor.visitQualified_table_name(self)
            else:
                return visitor.visitChildren(self)




    def qualified_table_name(self):

        localctx = sqlParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_qualified_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 900
                self.database_name()
                self.state = 901
                self.match(sqlParser.DOT)


            self.state = 905
            self.table_name()
            self.state = 911
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_INDEXED]:
                self.state = 906
                self.match(sqlParser.K_INDEXED)
                self.state = 907
                self.match(sqlParser.K_BY)
                self.state = 908
                self.index_name()
                pass
            elif token in [sqlParser.K_NOT]:
                self.state = 909
                self.match(sqlParser.K_NOT)
                self.state = 910
                self.match(sqlParser.K_INDEXED)
                pass
            elif token in [sqlParser.EOF, sqlParser.SCOL, sqlParser.K_CREATE, sqlParser.K_DELETE, sqlParser.K_DROP, sqlParser.K_INSERT, sqlParser.K_LIMIT, sqlParser.K_ORDER, sqlParser.K_REINDEX, sqlParser.K_REPLACE, sqlParser.K_SELECT, sqlParser.K_SET, sqlParser.K_UPDATE, sqlParser.K_VACUUM, sqlParser.K_WHERE, sqlParser.K_WITH]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(sqlParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(sqlParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.DOT)
            else:
                return self.getToken(sqlParser.DOT, i)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(sqlParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_CASE(self):
            return self.getToken(sqlParser.K_CASE, 0)

        def K_END(self):
            return self.getToken(sqlParser.K_END, 0)

        def K_WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_WHEN)
            else:
                return self.getToken(sqlParser.K_WHEN, i)

        def K_THEN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_THEN)
            else:
                return self.getToken(sqlParser.K_THEN, i)

        def K_ELSE(self):
            return self.getToken(sqlParser.K_ELSE, 0)

        def PIPE2(self):
            return self.getToken(sqlParser.PIPE2, 0)

        def STAR(self):
            return self.getToken(sqlParser.STAR, 0)

        def DIV(self):
            return self.getToken(sqlParser.DIV, 0)

        def MOD(self):
            return self.getToken(sqlParser.MOD, 0)

        def PLUS(self):
            return self.getToken(sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(sqlParser.MINUS, 0)

        def LT2(self):
            return self.getToken(sqlParser.LT2, 0)

        def GT2(self):
            return self.getToken(sqlParser.GT2, 0)

        def AMP(self):
            return self.getToken(sqlParser.AMP, 0)

        def PIPE(self):
            return self.getToken(sqlParser.PIPE, 0)

        def LT(self):
            return self.getToken(sqlParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(sqlParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(sqlParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(sqlParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(sqlParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(sqlParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(sqlParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(sqlParser.NOT_EQ2, 0)

        def K_AND(self):
            return self.getToken(sqlParser.K_AND, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_IS(self):
            return self.getToken(sqlParser.K_IS, 0)

        def K_BETWEEN(self):
            return self.getToken(sqlParser.K_BETWEEN, 0)

        def K_IN(self):
            return self.getToken(sqlParser.K_IN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def K_LIKE(self):
            return self.getToken(sqlParser.K_LIKE, 0)

        def K_GLOB(self):
            return self.getToken(sqlParser.K_GLOB, 0)

        def K_REGEXP(self):
            return self.getToken(sqlParser.K_REGEXP, 0)

        def K_MATCH(self):
            return self.getToken(sqlParser.K_MATCH, 0)

        def K_ESCAPE(self):
            return self.getToken(sqlParser.K_ESCAPE, 0)

        def K_ISNULL(self):
            return self.getToken(sqlParser.K_ISNULL, 0)

        def K_NOTNULL(self):
            return self.getToken(sqlParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = sqlParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 914
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 915
                self.match(sqlParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 924
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 919
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                    if la_ == 1:
                        self.state = 916
                        self.database_name()
                        self.state = 917
                        self.match(sqlParser.DOT)


                    self.state = 921
                    self.table_name()
                    self.state = 922
                    self.match(sqlParser.DOT)


                self.state = 926
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 927
                self.unary_operator()
                self.state = 928
                self.expr(18)
                pass

            elif la_ == 5:
                self.state = 930
                self.match(sqlParser.OPEN_PAR)
                self.state = 931
                self.expr(0)
                self.state = 932
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_EXISTS or _la==sqlParser.K_NOT:
                    self.state = 935
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_NOT:
                        self.state = 934
                        self.match(sqlParser.K_NOT)


                    self.state = 937
                    self.match(sqlParser.K_EXISTS)


                self.state = 940
                self.match(sqlParser.OPEN_PAR)
                self.state = 941
                self.select_stmt()
                self.state = 942
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 944
                self.match(sqlParser.K_CASE)
                self.state = 946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 945
                    self.expr(0)


                self.state = 953 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 948
                    self.match(sqlParser.K_WHEN)
                    self.state = 949
                    self.expr(0)
                    self.state = 950
                    self.match(sqlParser.K_THEN)
                    self.state = 951
                    self.expr(0)
                    self.state = 955 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==sqlParser.K_WHEN):
                        break

                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_ELSE:
                    self.state = 957
                    self.match(sqlParser.K_ELSE)
                    self.state = 958
                    self.expr(0)


                self.state = 961
                self.match(sqlParser.K_END)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1052
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1050
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                    if la_ == 1:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 965
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 966
                        self.match(sqlParser.PIPE2)
                        self.state = 967
                        self.expr(18)
                        pass

                    elif la_ == 2:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 968
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 969
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.STAR) | (1 << sqlParser.DIV) | (1 << sqlParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 970
                        self.expr(17)
                        pass

                    elif la_ == 3:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 971
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 972
                        _la = self._input.LA(1)
                        if not(_la==sqlParser.PLUS or _la==sqlParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 973
                        self.expr(16)
                        pass

                    elif la_ == 4:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 974
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 975
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.LT2) | (1 << sqlParser.GT2) | (1 << sqlParser.AMP) | (1 << sqlParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 976
                        self.expr(15)
                        pass

                    elif la_ == 5:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 977
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 978
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.LT) | (1 << sqlParser.LT_EQ) | (1 << sqlParser.GT) | (1 << sqlParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 979
                        self.expr(14)
                        pass

                    elif la_ == 6:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 980
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 981
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.ASSIGN) | (1 << sqlParser.EQ) | (1 << sqlParser.NOT_EQ1) | (1 << sqlParser.NOT_EQ2))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 982
                        self.expr(13)
                        pass

                    elif la_ == 7:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 983
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 984
                        self.match(sqlParser.K_AND)
                        self.state = 985
                        self.expr(11)
                        pass

                    elif la_ == 8:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 986
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 987
                        self.match(sqlParser.K_OR)
                        self.state = 988
                        self.expr(10)
                        pass

                    elif la_ == 9:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 989
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 990
                        self.match(sqlParser.K_IS)
                        self.state = 992
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                        if la_ == 1:
                            self.state = 991
                            self.match(sqlParser.K_NOT)


                        self.state = 994
                        self.expr(5)
                        pass

                    elif la_ == 10:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 995
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 997
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 996
                            self.match(sqlParser.K_NOT)


                        self.state = 999
                        self.match(sqlParser.K_BETWEEN)
                        self.state = 1000
                        self.expr(0)
                        self.state = 1001
                        self.match(sqlParser.K_AND)
                        self.state = 1002
                        self.expr(4)
                        pass

                    elif la_ == 11:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1004
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1006
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 1005
                            self.match(sqlParser.K_NOT)


                        self.state = 1008
                        self.match(sqlParser.K_IN)
                        self.state = 1028
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                        if la_ == 1:
                            self.state = 1009
                            self.match(sqlParser.OPEN_PAR)
                            self.state = 1019
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                            if la_ == 1:
                                self.state = 1010
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 1011
                                self.expr(0)
                                self.state = 1016
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==sqlParser.COMMA:
                                    self.state = 1012
                                    self.match(sqlParser.COMMA)
                                    self.state = 1013
                                    self.expr(0)
                                    self.state = 1018
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1021
                            self.match(sqlParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 1025
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                            if la_ == 1:
                                self.state = 1022
                                self.database_name()
                                self.state = 1023
                                self.match(sqlParser.DOT)


                            self.state = 1027
                            self.table_name()
                            pass


                        pass

                    elif la_ == 12:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1030
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1031
                        self.match(sqlParser.K_COLLATE)
                        self.state = 1032
                        self.collation_name()
                        pass

                    elif la_ == 13:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1033
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1035
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 1034
                            self.match(sqlParser.K_NOT)


                        self.state = 1037
                        _la = self._input.LA(1)
                        if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (sqlParser.K_GLOB - 77)) | (1 << (sqlParser.K_LIKE - 77)) | (1 << (sqlParser.K_MATCH - 77)) | (1 << (sqlParser.K_REGEXP - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1038
                        self.expr(0)
                        self.state = 1041
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                        if la_ == 1:
                            self.state = 1039
                            self.match(sqlParser.K_ESCAPE)
                            self.state = 1040
                            self.expr(0)


                        pass

                    elif la_ == 14:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1043
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1048
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [sqlParser.K_ISNULL]:
                            self.state = 1044
                            self.match(sqlParser.K_ISNULL)
                            pass
                        elif token in [sqlParser.K_NOTNULL]:
                            self.state = 1045
                            self.match(sqlParser.K_NOTNULL)
                            pass
                        elif token in [sqlParser.K_NOT]:
                            self.state = 1046
                            self.match(sqlParser.K_NOT)
                            self.state = 1047
                            self.match(sqlParser.K_NULL)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 1054
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITH(self):
            return self.getToken(sqlParser.K_WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(sqlParser.Common_table_expressionContext,i)


        def K_RECURSIVE(self):
            return self.getToken(sqlParser.K_RECURSIVE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = sqlParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(sqlParser.K_WITH)
            self.state = 1057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1056
                self.match(sqlParser.K_RECURSIVE)


            self.state = 1059
            self.common_table_expression()
            self.state = 1064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 1060
                self.match(sqlParser.COMMA)
                self.state = 1061
                self.common_table_expression()
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommon_table_expression" ):
                return visitor.visitCommon_table_expression(self)
            else:
                return visitor.visitChildren(self)




    def common_table_expression(self):

        localctx = sqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.table_name()
            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 1068
                self.match(sqlParser.OPEN_PAR)
                self.state = 1069
                self.column_name()
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 1070
                    self.match(sqlParser.COMMA)
                    self.state = 1071
                    self.column_name()
                    self.state = 1076
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1077
                self.match(sqlParser.CLOSE_PAR)


            self.state = 1081
            self.match(sqlParser.K_AS)
            self.state = 1082
            self.match(sqlParser.OPEN_PAR)
            self.state = 1083
            self.select_stmt()
            self.state = 1084
            self.match(sqlParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrdering_term" ):
                return visitor.visitOrdering_term(self)
            else:
                return visitor.visitChildren(self)




    def ordering_term(self):

        localctx = sqlParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.expr(0)
            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_COLLATE:
                self.state = 1087
                self.match(sqlParser.K_COLLATE)
                self.state = 1088
                self.collation_name()


            self.state = 1092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ASC or _la==sqlParser.K_DESC:
                self.state = 1091
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ASC or _la==sqlParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(sqlParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(sqlParser.Column_aliasContext,0)


        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_column" ):
                return visitor.visitResult_column(self)
            else:
                return visitor.visitChildren(self)




    def result_column(self):

        localctx = sqlParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 1106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1094
                self.match(sqlParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1095
                self.table_name()
                self.state = 1096
                self.match(sqlParser.DOT)
                self.state = 1097
                self.match(sqlParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1099
                self.expr(0)
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 1101
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 1100
                        self.match(sqlParser.K_AS)


                    self.state = 1103
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(sqlParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(sqlParser.Table_aliasContext,0)


        def K_INDEXED(self):
            return self.getToken(sqlParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(sqlParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_or_subquery" ):
                return visitor.visitTable_or_subquery(self)
            else:
                return visitor.visitChildren(self)




    def table_or_subquery(self):

        localctx = sqlParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1174
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1111
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                if la_ == 1:
                    self.state = 1108
                    self.schema_name()
                    self.state = 1109
                    self.match(sqlParser.DOT)


                self.state = 1113
                self.table_name()
                self.state = 1118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.OPEN_PAR or _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 1115
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 1114
                        self.match(sqlParser.K_AS)


                    self.state = 1117
                    self.table_alias()


                self.state = 1125
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_INDEXED]:
                    self.state = 1120
                    self.match(sqlParser.K_INDEXED)
                    self.state = 1121
                    self.match(sqlParser.K_BY)
                    self.state = 1122
                    self.index_name()
                    pass
                elif token in [sqlParser.K_NOT]:
                    self.state = 1123
                    self.match(sqlParser.K_NOT)
                    self.state = 1124
                    self.match(sqlParser.K_INDEXED)
                    pass
                elif token in [sqlParser.EOF, sqlParser.SCOL, sqlParser.CLOSE_PAR, sqlParser.COMMA, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_DELETE, sqlParser.K_DROP, sqlParser.K_EXCEPT, sqlParser.K_GROUP, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INTERSECT, sqlParser.K_JOIN, sqlParser.K_LEFT, sqlParser.K_LIMIT, sqlParser.K_NATURAL, sqlParser.K_ON, sqlParser.K_ORDER, sqlParser.K_REINDEX, sqlParser.K_REPLACE, sqlParser.K_SELECT, sqlParser.K_UNION, sqlParser.K_UPDATE, sqlParser.K_USING, sqlParser.K_VACUUM, sqlParser.K_WHERE, sqlParser.K_WITH]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1130
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 1127
                    self.schema_name()
                    self.state = 1128
                    self.match(sqlParser.DOT)


                self.state = 1132
                self.table_function_name()
                self.state = 1133
                self.match(sqlParser.OPEN_PAR)
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.OPEN_PAR) | (1 << sqlParser.PLUS) | (1 << sqlParser.MINUS) | (1 << sqlParser.TILDE) | (1 << sqlParser.K_ABORT) | (1 << sqlParser.K_ACTION) | (1 << sqlParser.K_ADD) | (1 << sqlParser.K_AFTER) | (1 << sqlParser.K_ALL) | (1 << sqlParser.K_ALTER) | (1 << sqlParser.K_ANALYZE) | (1 << sqlParser.K_AND) | (1 << sqlParser.K_AS) | (1 << sqlParser.K_ASC) | (1 << sqlParser.K_ATTACH) | (1 << sqlParser.K_AUTOINCREMENT) | (1 << sqlParser.K_BEFORE) | (1 << sqlParser.K_BEGIN) | (1 << sqlParser.K_BETWEEN) | (1 << sqlParser.K_BY) | (1 << sqlParser.K_CASCADE) | (1 << sqlParser.K_CASE) | (1 << sqlParser.K_CAST) | (1 << sqlParser.K_CHECK) | (1 << sqlParser.K_COLLATE) | (1 << sqlParser.K_COLUMN) | (1 << sqlParser.K_COMMIT) | (1 << sqlParser.K_CONFLICT) | (1 << sqlParser.K_CONSTRAINT) | (1 << sqlParser.K_CREATE) | (1 << sqlParser.K_CROSS) | (1 << sqlParser.K_CURRENT_DATE) | (1 << sqlParser.K_CURRENT_TIME) | (1 << sqlParser.K_CURRENT_TIMESTAMP) | (1 << sqlParser.K_DATABASE) | (1 << sqlParser.K_DEFAULT) | (1 << sqlParser.K_DEFERRABLE) | (1 << sqlParser.K_DEFERRED) | (1 << sqlParser.K_DELETE) | (1 << sqlParser.K_DESC) | (1 << sqlParser.K_DETACH) | (1 << sqlParser.K_DISTINCT) | (1 << sqlParser.K_DROP))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (sqlParser.K_EACH - 64)) | (1 << (sqlParser.K_ELSE - 64)) | (1 << (sqlParser.K_END - 64)) | (1 << (sqlParser.K_ESCAPE - 64)) | (1 << (sqlParser.K_EXCEPT - 64)) | (1 << (sqlParser.K_EXCLUSIVE - 64)) | (1 << (sqlParser.K_EXISTS - 64)) | (1 << (sqlParser.K_EXPLAIN - 64)) | (1 << (sqlParser.K_FAIL - 64)) | (1 << (sqlParser.K_FOR - 64)) | (1 << (sqlParser.K_FOREIGN - 64)) | (1 << (sqlParser.K_FROM - 64)) | (1 << (sqlParser.K_FULL - 64)) | (1 << (sqlParser.K_GLOB - 64)) | (1 << (sqlParser.K_GROUP - 64)) | (1 << (sqlParser.K_HAVING - 64)) | (1 << (sqlParser.K_IF - 64)) | (1 << (sqlParser.K_IGNORE - 64)) | (1 << (sqlParser.K_IMMEDIATE - 64)) | (1 << (sqlParser.K_IN - 64)) | (1 << (sqlParser.K_INDEX - 64)) | (1 << (sqlParser.K_INDEXED - 64)) | (1 << (sqlParser.K_INITIALLY - 64)) | (1 << (sqlParser.K_INNER - 64)) | (1 << (sqlParser.K_INSERT - 64)) | (1 << (sqlParser.K_INSTEAD - 64)) | (1 << (sqlParser.K_INTERSECT - 64)) | (1 << (sqlParser.K_INTO - 64)) | (1 << (sqlParser.K_IS - 64)) | (1 << (sqlParser.K_ISNULL - 64)) | (1 << (sqlParser.K_JOIN - 64)) | (1 << (sqlParser.K_KEY - 64)) | (1 << (sqlParser.K_LEFT - 64)) | (1 << (sqlParser.K_LIKE - 64)) | (1 << (sqlParser.K_LIMIT - 64)) | (1 << (sqlParser.K_MATCH - 64)) | (1 << (sqlParser.K_NATURAL - 64)) | (1 << (sqlParser.K_NO - 64)) | (1 << (sqlParser.K_NOT - 64)) | (1 << (sqlParser.K_NOTNULL - 64)) | (1 << (sqlParser.K_NULL - 64)) | (1 << (sqlParser.K_OF - 64)) | (1 << (sqlParser.K_OFFSET - 64)) | (1 << (sqlParser.K_ON - 64)) | (1 << (sqlParser.K_OR - 64)) | (1 << (sqlParser.K_ORDER - 64)) | (1 << (sqlParser.K_OUTER - 64)) | (1 << (sqlParser.K_PLAN - 64)) | (1 << (sqlParser.K_PRAGMA - 64)) | (1 << (sqlParser.K_PRIMARY - 64)) | (1 << (sqlParser.K_QUERY - 64)) | (1 << (sqlParser.K_RAISE - 64)) | (1 << (sqlParser.K_RECURSIVE - 64)) | (1 << (sqlParser.K_REFERENCES - 64)) | (1 << (sqlParser.K_REGEXP - 64)) | (1 << (sqlParser.K_REINDEX - 64)) | (1 << (sqlParser.K_RELEASE - 64)) | (1 << (sqlParser.K_RENAME - 64)) | (1 << (sqlParser.K_REPLACE - 64)) | (1 << (sqlParser.K_RESTRICT - 64)) | (1 << (sqlParser.K_RIGHT - 64)) | (1 << (sqlParser.K_ROLLBACK - 64)) | (1 << (sqlParser.K_ROW - 64)) | (1 << (sqlParser.K_SAVEPOINT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (sqlParser.K_SELECT - 128)) | (1 << (sqlParser.K_SET - 128)) | (1 << (sqlParser.K_TABLE - 128)) | (1 << (sqlParser.K_TEMP - 128)) | (1 << (sqlParser.K_TEMPORARY - 128)) | (1 << (sqlParser.K_THEN - 128)) | (1 << (sqlParser.K_TO - 128)) | (1 << (sqlParser.K_TRANSACTION - 128)) | (1 << (sqlParser.K_TRIGGER - 128)) | (1 << (sqlParser.K_UNION - 128)) | (1 << (sqlParser.K_UNIQUE - 128)) | (1 << (sqlParser.K_UPDATE - 128)) | (1 << (sqlParser.K_USING - 128)) | (1 << (sqlParser.K_VACUUM - 128)) | (1 << (sqlParser.K_VALUES - 128)) | (1 << (sqlParser.K_VIEW - 128)) | (1 << (sqlParser.K_VIRTUAL - 128)) | (1 << (sqlParser.K_WHEN - 128)) | (1 << (sqlParser.K_WHERE - 128)) | (1 << (sqlParser.K_WITH - 128)) | (1 << (sqlParser.K_WITHOUT - 128)) | (1 << (sqlParser.IDENTIFIER - 128)) | (1 << (sqlParser.NUMERIC_LITERAL - 128)) | (1 << (sqlParser.BIND_PARAMETER - 128)) | (1 << (sqlParser.STRING_LITERAL - 128)) | (1 << (sqlParser.BLOB_LITERAL - 128)))) != 0):
                    self.state = 1134
                    self.expr(0)
                    self.state = 1139
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 1135
                        self.match(sqlParser.COMMA)
                        self.state = 1136
                        self.expr(0)
                        self.state = 1141
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1144
                self.match(sqlParser.CLOSE_PAR)
                self.state = 1149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.OPEN_PAR or _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 1146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 1145
                        self.match(sqlParser.K_AS)


                    self.state = 1148
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1151
                self.match(sqlParser.OPEN_PAR)
                self.state = 1161
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1152
                    self.table_or_subquery()
                    self.state = 1157
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 1153
                        self.match(sqlParser.COMMA)
                        self.state = 1154
                        self.table_or_subquery()
                        self.state = 1159
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1160
                    self.join_clause()
                    pass


                self.state = 1163
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1165
                self.match(sqlParser.OPEN_PAR)
                self.state = 1166
                self.select_stmt()
                self.state = 1167
                self.match(sqlParser.CLOSE_PAR)
                self.state = 1172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.OPEN_PAR or _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 1169
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 1168
                        self.match(sqlParser.K_AS)


                    self.state = 1171
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_clause" ):
                return visitor.visitJoin_clause(self)
            else:
                return visitor.visitChildren(self)




    def join_clause(self):

        localctx = sqlParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self.table_or_subquery()
            self.state = 1183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA or _la==sqlParser.K_CROSS or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (sqlParser.K_INNER - 87)) | (1 << (sqlParser.K_JOIN - 87)) | (1 << (sqlParser.K_LEFT - 87)) | (1 << (sqlParser.K_NATURAL - 87)))) != 0):
                self.state = 1177
                self.join_operator()
                self.state = 1178
                self.table_or_subquery()
                self.state = 1179
                self.join_constraint()
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(sqlParser.COMMA, 0)

        def K_JOIN(self):
            return self.getToken(sqlParser.K_JOIN, 0)

        def K_NATURAL(self):
            return self.getToken(sqlParser.K_NATURAL, 0)

        def K_LEFT(self):
            return self.getToken(sqlParser.K_LEFT, 0)

        def K_INNER(self):
            return self.getToken(sqlParser.K_INNER, 0)

        def K_CROSS(self):
            return self.getToken(sqlParser.K_CROSS, 0)

        def K_OUTER(self):
            return self.getToken(sqlParser.K_OUTER, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_operator" ):
                return visitor.visitJoin_operator(self)
            else:
                return visitor.visitChildren(self)




    def join_operator(self):

        localctx = sqlParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1199
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1186
                self.match(sqlParser.COMMA)
                pass
            elif token in [sqlParser.K_CROSS, sqlParser.K_INNER, sqlParser.K_JOIN, sqlParser.K_LEFT, sqlParser.K_NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_NATURAL:
                    self.state = 1187
                    self.match(sqlParser.K_NATURAL)


                self.state = 1196
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_LEFT]:
                    self.state = 1190
                    self.match(sqlParser.K_LEFT)
                    self.state = 1192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_OUTER:
                        self.state = 1191
                        self.match(sqlParser.K_OUTER)


                    pass
                elif token in [sqlParser.K_INNER]:
                    self.state = 1194
                    self.match(sqlParser.K_INNER)
                    pass
                elif token in [sqlParser.K_CROSS]:
                    self.state = 1195
                    self.match(sqlParser.K_CROSS)
                    pass
                elif token in [sqlParser.K_JOIN]:
                    pass
                else:
                    pass
                self.state = 1198
                self.match(sqlParser.K_JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_USING(self):
            return self.getToken(sqlParser.K_USING, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_constraint" ):
                return visitor.visitJoin_constraint(self)
            else:
                return visitor.visitChildren(self)




    def join_constraint(self):

        localctx = sqlParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_ON]:
                self.state = 1201
                self.match(sqlParser.K_ON)
                self.state = 1202
                self.expr(0)
                pass
            elif token in [sqlParser.K_USING]:
                self.state = 1203
                self.match(sqlParser.K_USING)
                self.state = 1204
                self.match(sqlParser.OPEN_PAR)
                self.state = 1205
                self.column_name()
                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 1206
                    self.match(sqlParser.COMMA)
                    self.state = 1207
                    self.column_name()
                    self.state = 1212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1213
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.EOF, sqlParser.SCOL, sqlParser.CLOSE_PAR, sqlParser.COMMA, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_DELETE, sqlParser.K_DROP, sqlParser.K_EXCEPT, sqlParser.K_GROUP, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INTERSECT, sqlParser.K_JOIN, sqlParser.K_LEFT, sqlParser.K_LIMIT, sqlParser.K_NATURAL, sqlParser.K_ORDER, sqlParser.K_REINDEX, sqlParser.K_REPLACE, sqlParser.K_SELECT, sqlParser.K_UNION, sqlParser.K_UPDATE, sqlParser.K_VACUUM, sqlParser.K_WHERE, sqlParser.K_WITH]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._result_column = None # Result_columnContext
            self.columns = list() # of Result_columnContexts
            self._table_or_subquery = None # Table_or_subqueryContext
            self.tables = list() # of Table_or_subqueryContexts
            self.join = None # Join_clauseContext
            self.where = None # ExprContext
            self._expr = None # ExprContext
            self.group_by = list() # of ExprContexts
            self.having = None # ExprContext

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_core" ):
                return visitor.visitSelect_core(self)
            else:
                return visitor.visitChildren(self)




    def select_core(self):

        localctx = sqlParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.match(sqlParser.K_SELECT)
            self.state = 1219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1218
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ALL or _la==sqlParser.K_DISTINCT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1221
            localctx._result_column = self.result_column()
            localctx.columns.append(localctx._result_column)
            self.state = 1226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 1222
                self.match(sqlParser.COMMA)
                self.state = 1223
                localctx._result_column = self.result_column()
                localctx.columns.append(localctx._result_column)
                self.state = 1228
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_FROM:
                self.state = 1229
                self.match(sqlParser.K_FROM)
                self.state = 1239
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1230
                    localctx._table_or_subquery = self.table_or_subquery()
                    localctx.tables.append(localctx._table_or_subquery)
                    self.state = 1235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 1231
                        self.match(sqlParser.COMMA)
                        self.state = 1232
                        localctx._table_or_subquery = self.table_or_subquery()
                        localctx.tables.append(localctx._table_or_subquery)
                        self.state = 1237
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1238
                    localctx.join = self.join_clause()
                    pass




            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 1243
                self.match(sqlParser.K_WHERE)
                self.state = 1244
                localctx.where = self.expr(0)


            self.state = 1261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_GROUP:
                self.state = 1247
                self.match(sqlParser.K_GROUP)
                self.state = 1248
                self.match(sqlParser.K_BY)
                self.state = 1249
                localctx._expr = self.expr(0)
                localctx.group_by.append(localctx._expr)
                self.state = 1254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 1250
                    self.match(sqlParser.COMMA)
                    self.state = 1251
                    localctx._expr = self.expr(0)
                    localctx.group_by.append(localctx._expr)
                    self.state = 1256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_HAVING:
                    self.state = 1257
                    self.match(sqlParser.K_HAVING)
                    self.state = 1258
                    localctx.having = self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conflict_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def K_CONFLICT(self):
            return self.getToken(sqlParser.K_CONFLICT, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_conflict_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflict_clause" ):
                listener.enterConflict_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflict_clause" ):
                listener.exitConflict_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConflict_clause" ):
                return visitor.visitConflict_clause(self)
            else:
                return visitor.visitChildren(self)




    def conflict_clause(self):

        localctx = sqlParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ON:
                self.state = 1263
                self.match(sqlParser.K_ON)
                self.state = 1264
                self.match(sqlParser.K_CONFLICT)
                self.state = 1265
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ABORT or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (sqlParser.K_FAIL - 72)) | (1 << (sqlParser.K_IGNORE - 72)) | (1 << (sqlParser.K_REPLACE - 72)) | (1 << (sqlParser.K_ROLLBACK - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(sqlParser.K_UNION, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def K_INTERSECT(self):
            return self.getToken(sqlParser.K_INTERSECT, 0)

        def K_EXCEPT(self):
            return self.getToken(sqlParser.K_EXCEPT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_operator" ):
                return visitor.visitCompound_operator(self)
            else:
                return visitor.visitChildren(self)




    def compound_operator(self):

        localctx = sqlParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_compound_operator)
        try:
            self.state = 1273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1268
                self.match(sqlParser.K_UNION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1269
                self.match(sqlParser.K_UNION)
                self.state = 1270
                self.match(sqlParser.K_ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1271
                self.match(sqlParser.K_INTERSECT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1272
                self.match(sqlParser.K_EXCEPT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_foreign_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table" ):
                listener.enterForeign_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table" ):
                listener.exitForeign_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeign_table" ):
                return visitor.visitForeign_table(self)
            else:
                return visitor.visitChildren(self)




    def foreign_table(self):

        localctx = sqlParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(sqlParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(sqlParser.MINUS, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = sqlParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.PLUS or _la==sqlParser.MINUS:
                self.state = 1277
                _la = self._input.LA(1)
                if not(_la==sqlParser.PLUS or _la==sqlParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1280
            self.match(sqlParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(sqlParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(sqlParser.BLOB_LITERAL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(sqlParser.K_CURRENT_TIME, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(sqlParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(sqlParser.K_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_value" ):
                return visitor.visitLiteral_value(self)
            else:
                return visitor.visitChildren(self)




    def literal_value(self):

        localctx = sqlParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1282
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.K_CURRENT_DATE) | (1 << sqlParser.K_CURRENT_TIME) | (1 << sqlParser.K_CURRENT_TIMESTAMP))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (sqlParser.K_NULL - 104)) | (1 << (sqlParser.NUMERIC_LITERAL - 104)) | (1 << (sqlParser.STRING_LITERAL - 104)) | (1 << (sqlParser.BLOB_LITERAL - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(sqlParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(sqlParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(sqlParser.TILDE, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator" ):
                return visitor.visitUnary_operator(self)
            else:
                return visitor.visitChildren(self)




    def unary_operator(self):

        localctx = sqlParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.PLUS) | (1 << sqlParser.MINUS) | (1 << sqlParser.TILDE))) != 0) or _la==sqlParser.K_NOT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = sqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            _la = self._input.LA(1)
            if not(_la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_ACTION(self):
            return self.getToken(sqlParser.K_ACTION, 0)

        def K_ADD(self):
            return self.getToken(sqlParser.K_ADD, 0)

        def K_AFTER(self):
            return self.getToken(sqlParser.K_AFTER, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def K_ALTER(self):
            return self.getToken(sqlParser.K_ALTER, 0)

        def K_ANALYZE(self):
            return self.getToken(sqlParser.K_ANALYZE, 0)

        def K_AND(self):
            return self.getToken(sqlParser.K_AND, 0)

        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_ATTACH(self):
            return self.getToken(sqlParser.K_ATTACH, 0)

        def K_AUTOINCREMENT(self):
            return self.getToken(sqlParser.K_AUTOINCREMENT, 0)

        def K_BEFORE(self):
            return self.getToken(sqlParser.K_BEFORE, 0)

        def K_BEGIN(self):
            return self.getToken(sqlParser.K_BEGIN, 0)

        def K_BETWEEN(self):
            return self.getToken(sqlParser.K_BETWEEN, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def K_CASCADE(self):
            return self.getToken(sqlParser.K_CASCADE, 0)

        def K_CASE(self):
            return self.getToken(sqlParser.K_CASE, 0)

        def K_CAST(self):
            return self.getToken(sqlParser.K_CAST, 0)

        def K_CHECK(self):
            return self.getToken(sqlParser.K_CHECK, 0)

        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def K_COLUMN(self):
            return self.getToken(sqlParser.K_COLUMN, 0)

        def K_COMMIT(self):
            return self.getToken(sqlParser.K_COMMIT, 0)

        def K_CONFLICT(self):
            return self.getToken(sqlParser.K_CONFLICT, 0)

        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_CROSS(self):
            return self.getToken(sqlParser.K_CROSS, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(sqlParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(sqlParser.K_CURRENT_TIME, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(sqlParser.K_CURRENT_TIMESTAMP, 0)

        def K_DATABASE(self):
            return self.getToken(sqlParser.K_DATABASE, 0)

        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def K_DEFERRABLE(self):
            return self.getToken(sqlParser.K_DEFERRABLE, 0)

        def K_DEFERRED(self):
            return self.getToken(sqlParser.K_DEFERRED, 0)

        def K_DELETE(self):
            return self.getToken(sqlParser.K_DELETE, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def K_DETACH(self):
            return self.getToken(sqlParser.K_DETACH, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_DROP(self):
            return self.getToken(sqlParser.K_DROP, 0)

        def K_EACH(self):
            return self.getToken(sqlParser.K_EACH, 0)

        def K_ELSE(self):
            return self.getToken(sqlParser.K_ELSE, 0)

        def K_END(self):
            return self.getToken(sqlParser.K_END, 0)

        def K_ESCAPE(self):
            return self.getToken(sqlParser.K_ESCAPE, 0)

        def K_EXCEPT(self):
            return self.getToken(sqlParser.K_EXCEPT, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(sqlParser.K_EXCLUSIVE, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def K_EXPLAIN(self):
            return self.getToken(sqlParser.K_EXPLAIN, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_FOR(self):
            return self.getToken(sqlParser.K_FOR, 0)

        def K_FOREIGN(self):
            return self.getToken(sqlParser.K_FOREIGN, 0)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_FULL(self):
            return self.getToken(sqlParser.K_FULL, 0)

        def K_GLOB(self):
            return self.getToken(sqlParser.K_GLOB, 0)

        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def K_IF(self):
            return self.getToken(sqlParser.K_IF, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def K_IMMEDIATE(self):
            return self.getToken(sqlParser.K_IMMEDIATE, 0)

        def K_IN(self):
            return self.getToken(sqlParser.K_IN, 0)

        def K_INDEX(self):
            return self.getToken(sqlParser.K_INDEX, 0)

        def K_INDEXED(self):
            return self.getToken(sqlParser.K_INDEXED, 0)

        def K_INITIALLY(self):
            return self.getToken(sqlParser.K_INITIALLY, 0)

        def K_INNER(self):
            return self.getToken(sqlParser.K_INNER, 0)

        def K_INSERT(self):
            return self.getToken(sqlParser.K_INSERT, 0)

        def K_INSTEAD(self):
            return self.getToken(sqlParser.K_INSTEAD, 0)

        def K_INTERSECT(self):
            return self.getToken(sqlParser.K_INTERSECT, 0)

        def K_INTO(self):
            return self.getToken(sqlParser.K_INTO, 0)

        def K_IS(self):
            return self.getToken(sqlParser.K_IS, 0)

        def K_ISNULL(self):
            return self.getToken(sqlParser.K_ISNULL, 0)

        def K_JOIN(self):
            return self.getToken(sqlParser.K_JOIN, 0)

        def K_KEY(self):
            return self.getToken(sqlParser.K_KEY, 0)

        def K_LEFT(self):
            return self.getToken(sqlParser.K_LEFT, 0)

        def K_LIKE(self):
            return self.getToken(sqlParser.K_LIKE, 0)

        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def K_MATCH(self):
            return self.getToken(sqlParser.K_MATCH, 0)

        def K_NATURAL(self):
            return self.getToken(sqlParser.K_NATURAL, 0)

        def K_NO(self):
            return self.getToken(sqlParser.K_NO, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_NOTNULL(self):
            return self.getToken(sqlParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def K_OF(self):
            return self.getToken(sqlParser.K_OF, 0)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_OUTER(self):
            return self.getToken(sqlParser.K_OUTER, 0)

        def K_PLAN(self):
            return self.getToken(sqlParser.K_PLAN, 0)

        def K_PRAGMA(self):
            return self.getToken(sqlParser.K_PRAGMA, 0)

        def K_PRIMARY(self):
            return self.getToken(sqlParser.K_PRIMARY, 0)

        def K_QUERY(self):
            return self.getToken(sqlParser.K_QUERY, 0)

        def K_RAISE(self):
            return self.getToken(sqlParser.K_RAISE, 0)

        def K_RECURSIVE(self):
            return self.getToken(sqlParser.K_RECURSIVE, 0)

        def K_REFERENCES(self):
            return self.getToken(sqlParser.K_REFERENCES, 0)

        def K_REGEXP(self):
            return self.getToken(sqlParser.K_REGEXP, 0)

        def K_REINDEX(self):
            return self.getToken(sqlParser.K_REINDEX, 0)

        def K_RELEASE(self):
            return self.getToken(sqlParser.K_RELEASE, 0)

        def K_RENAME(self):
            return self.getToken(sqlParser.K_RENAME, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_RESTRICT(self):
            return self.getToken(sqlParser.K_RESTRICT, 0)

        def K_RIGHT(self):
            return self.getToken(sqlParser.K_RIGHT, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ROW(self):
            return self.getToken(sqlParser.K_ROW, 0)

        def K_SAVEPOINT(self):
            return self.getToken(sqlParser.K_SAVEPOINT, 0)

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def K_TABLE(self):
            return self.getToken(sqlParser.K_TABLE, 0)

        def K_TEMP(self):
            return self.getToken(sqlParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(sqlParser.K_TEMPORARY, 0)

        def K_THEN(self):
            return self.getToken(sqlParser.K_THEN, 0)

        def K_TO(self):
            return self.getToken(sqlParser.K_TO, 0)

        def K_TRANSACTION(self):
            return self.getToken(sqlParser.K_TRANSACTION, 0)

        def K_TRIGGER(self):
            return self.getToken(sqlParser.K_TRIGGER, 0)

        def K_UNION(self):
            return self.getToken(sqlParser.K_UNION, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def K_USING(self):
            return self.getToken(sqlParser.K_USING, 0)

        def K_VACUUM(self):
            return self.getToken(sqlParser.K_VACUUM, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def K_VIEW(self):
            return self.getToken(sqlParser.K_VIEW, 0)

        def K_VIRTUAL(self):
            return self.getToken(sqlParser.K_VIRTUAL, 0)

        def K_WHEN(self):
            return self.getToken(sqlParser.K_WHEN, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_WITH(self):
            return self.getToken(sqlParser.K_WITH, 0)

        def K_WITHOUT(self):
            return self.getToken(sqlParser.K_WITHOUT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = sqlParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (sqlParser.K_ABORT - 25)) | (1 << (sqlParser.K_ACTION - 25)) | (1 << (sqlParser.K_ADD - 25)) | (1 << (sqlParser.K_AFTER - 25)) | (1 << (sqlParser.K_ALL - 25)) | (1 << (sqlParser.K_ALTER - 25)) | (1 << (sqlParser.K_ANALYZE - 25)) | (1 << (sqlParser.K_AND - 25)) | (1 << (sqlParser.K_AS - 25)) | (1 << (sqlParser.K_ASC - 25)) | (1 << (sqlParser.K_ATTACH - 25)) | (1 << (sqlParser.K_AUTOINCREMENT - 25)) | (1 << (sqlParser.K_BEFORE - 25)) | (1 << (sqlParser.K_BEGIN - 25)) | (1 << (sqlParser.K_BETWEEN - 25)) | (1 << (sqlParser.K_BY - 25)) | (1 << (sqlParser.K_CASCADE - 25)) | (1 << (sqlParser.K_CASE - 25)) | (1 << (sqlParser.K_CAST - 25)) | (1 << (sqlParser.K_CHECK - 25)) | (1 << (sqlParser.K_COLLATE - 25)) | (1 << (sqlParser.K_COLUMN - 25)) | (1 << (sqlParser.K_COMMIT - 25)) | (1 << (sqlParser.K_CONFLICT - 25)) | (1 << (sqlParser.K_CONSTRAINT - 25)) | (1 << (sqlParser.K_CREATE - 25)) | (1 << (sqlParser.K_CROSS - 25)) | (1 << (sqlParser.K_CURRENT_DATE - 25)) | (1 << (sqlParser.K_CURRENT_TIME - 25)) | (1 << (sqlParser.K_CURRENT_TIMESTAMP - 25)) | (1 << (sqlParser.K_DATABASE - 25)) | (1 << (sqlParser.K_DEFAULT - 25)) | (1 << (sqlParser.K_DEFERRABLE - 25)) | (1 << (sqlParser.K_DEFERRED - 25)) | (1 << (sqlParser.K_DELETE - 25)) | (1 << (sqlParser.K_DESC - 25)) | (1 << (sqlParser.K_DETACH - 25)) | (1 << (sqlParser.K_DISTINCT - 25)) | (1 << (sqlParser.K_DROP - 25)) | (1 << (sqlParser.K_EACH - 25)) | (1 << (sqlParser.K_ELSE - 25)) | (1 << (sqlParser.K_END - 25)) | (1 << (sqlParser.K_ESCAPE - 25)) | (1 << (sqlParser.K_EXCEPT - 25)) | (1 << (sqlParser.K_EXCLUSIVE - 25)) | (1 << (sqlParser.K_EXISTS - 25)) | (1 << (sqlParser.K_EXPLAIN - 25)) | (1 << (sqlParser.K_FAIL - 25)) | (1 << (sqlParser.K_FOR - 25)) | (1 << (sqlParser.K_FOREIGN - 25)) | (1 << (sqlParser.K_FROM - 25)) | (1 << (sqlParser.K_FULL - 25)) | (1 << (sqlParser.K_GLOB - 25)) | (1 << (sqlParser.K_GROUP - 25)) | (1 << (sqlParser.K_HAVING - 25)) | (1 << (sqlParser.K_IF - 25)) | (1 << (sqlParser.K_IGNORE - 25)) | (1 << (sqlParser.K_IMMEDIATE - 25)) | (1 << (sqlParser.K_IN - 25)) | (1 << (sqlParser.K_INDEX - 25)) | (1 << (sqlParser.K_INDEXED - 25)) | (1 << (sqlParser.K_INITIALLY - 25)) | (1 << (sqlParser.K_INNER - 25)) | (1 << (sqlParser.K_INSERT - 25)))) != 0) or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (sqlParser.K_INSTEAD - 89)) | (1 << (sqlParser.K_INTERSECT - 89)) | (1 << (sqlParser.K_INTO - 89)) | (1 << (sqlParser.K_IS - 89)) | (1 << (sqlParser.K_ISNULL - 89)) | (1 << (sqlParser.K_JOIN - 89)) | (1 << (sqlParser.K_KEY - 89)) | (1 << (sqlParser.K_LEFT - 89)) | (1 << (sqlParser.K_LIKE - 89)) | (1 << (sqlParser.K_LIMIT - 89)) | (1 << (sqlParser.K_MATCH - 89)) | (1 << (sqlParser.K_NATURAL - 89)) | (1 << (sqlParser.K_NO - 89)) | (1 << (sqlParser.K_NOT - 89)) | (1 << (sqlParser.K_NOTNULL - 89)) | (1 << (sqlParser.K_NULL - 89)) | (1 << (sqlParser.K_OF - 89)) | (1 << (sqlParser.K_OFFSET - 89)) | (1 << (sqlParser.K_ON - 89)) | (1 << (sqlParser.K_OR - 89)) | (1 << (sqlParser.K_ORDER - 89)) | (1 << (sqlParser.K_OUTER - 89)) | (1 << (sqlParser.K_PLAN - 89)) | (1 << (sqlParser.K_PRAGMA - 89)) | (1 << (sqlParser.K_PRIMARY - 89)) | (1 << (sqlParser.K_QUERY - 89)) | (1 << (sqlParser.K_RAISE - 89)) | (1 << (sqlParser.K_RECURSIVE - 89)) | (1 << (sqlParser.K_REFERENCES - 89)) | (1 << (sqlParser.K_REGEXP - 89)) | (1 << (sqlParser.K_REINDEX - 89)) | (1 << (sqlParser.K_RELEASE - 89)) | (1 << (sqlParser.K_RENAME - 89)) | (1 << (sqlParser.K_REPLACE - 89)) | (1 << (sqlParser.K_RESTRICT - 89)) | (1 << (sqlParser.K_RIGHT - 89)) | (1 << (sqlParser.K_ROLLBACK - 89)) | (1 << (sqlParser.K_ROW - 89)) | (1 << (sqlParser.K_SAVEPOINT - 89)) | (1 << (sqlParser.K_SELECT - 89)) | (1 << (sqlParser.K_SET - 89)) | (1 << (sqlParser.K_TABLE - 89)) | (1 << (sqlParser.K_TEMP - 89)) | (1 << (sqlParser.K_TEMPORARY - 89)) | (1 << (sqlParser.K_THEN - 89)) | (1 << (sqlParser.K_TO - 89)) | (1 << (sqlParser.K_TRANSACTION - 89)) | (1 << (sqlParser.K_TRIGGER - 89)) | (1 << (sqlParser.K_UNION - 89)) | (1 << (sqlParser.K_UNIQUE - 89)) | (1 << (sqlParser.K_UPDATE - 89)) | (1 << (sqlParser.K_USING - 89)) | (1 << (sqlParser.K_VACUUM - 89)) | (1 << (sqlParser.K_VALUES - 89)) | (1 << (sqlParser.K_VIEW - 89)) | (1 << (sqlParser.K_VIRTUAL - 89)) | (1 << (sqlParser.K_WHEN - 89)) | (1 << (sqlParser.K_WHERE - 89)) | (1 << (sqlParser.K_WITH - 89)) | (1 << (sqlParser.K_WITHOUT - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = sqlParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_database_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_name" ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_name" ):
                listener.exitDatabase_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_name" ):
                return visitor.visitDatabase_name(self)
            else:
                return visitor.visitChildren(self)




    def database_name(self):

        localctx = sqlParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchema_name" ):
                return visitor.visitSchema_name(self)
            else:
                return visitor.visitChildren(self)




    def schema_name(self):

        localctx = sqlParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_name" ):
                listener.enterTable_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_name" ):
                listener.exitTable_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_function_name" ):
                return visitor.visitTable_function_name(self)
            else:
                return visitor.visitChildren(self)




    def table_function_name(self):

        localctx = sqlParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = sqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name" ):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)




    def column_name(self):

        localctx = sqlParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollation_name" ):
                return visitor.visitCollation_name(self)
            else:
                return visitor.visitChildren(self)




    def collation_name(self):

        localctx = sqlParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_name" ):
                return visitor.visitIndex_name(self)
            else:
                return visitor.visitChildren(self)




    def index_name(self):

        localctx = sqlParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def table_alias(self):
            return self.getTypedRuleContext(sqlParser.Table_aliasContext,0)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = sqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_table_alias)
        try:
            self.state = 1312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1306
                self.match(sqlParser.IDENTIFIER)
                pass
            elif token in [sqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1307
                self.match(sqlParser.STRING_LITERAL)
                pass
            elif token in [sqlParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1308
                self.match(sqlParser.OPEN_PAR)
                self.state = 1309
                self.table_alias()
                self.state = 1310
                self.match(sqlParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(sqlParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_name" ):
                return visitor.visitAny_name(self)
            else:
                return visitor.visitChildren(self)




    def any_name(self):

        localctx = sqlParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_any_name)
        try:
            self.state = 1321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1314
                self.match(sqlParser.IDENTIFIER)
                pass
            elif token in [sqlParser.K_ABORT, sqlParser.K_ACTION, sqlParser.K_ADD, sqlParser.K_AFTER, sqlParser.K_ALL, sqlParser.K_ALTER, sqlParser.K_ANALYZE, sqlParser.K_AND, sqlParser.K_AS, sqlParser.K_ASC, sqlParser.K_ATTACH, sqlParser.K_AUTOINCREMENT, sqlParser.K_BEFORE, sqlParser.K_BEGIN, sqlParser.K_BETWEEN, sqlParser.K_BY, sqlParser.K_CASCADE, sqlParser.K_CASE, sqlParser.K_CAST, sqlParser.K_CHECK, sqlParser.K_COLLATE, sqlParser.K_COLUMN, sqlParser.K_COMMIT, sqlParser.K_CONFLICT, sqlParser.K_CONSTRAINT, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_CURRENT_DATE, sqlParser.K_CURRENT_TIME, sqlParser.K_CURRENT_TIMESTAMP, sqlParser.K_DATABASE, sqlParser.K_DEFAULT, sqlParser.K_DEFERRABLE, sqlParser.K_DEFERRED, sqlParser.K_DELETE, sqlParser.K_DESC, sqlParser.K_DETACH, sqlParser.K_DISTINCT, sqlParser.K_DROP, sqlParser.K_EACH, sqlParser.K_ELSE, sqlParser.K_END, sqlParser.K_ESCAPE, sqlParser.K_EXCEPT, sqlParser.K_EXCLUSIVE, sqlParser.K_EXISTS, sqlParser.K_EXPLAIN, sqlParser.K_FAIL, sqlParser.K_FOR, sqlParser.K_FOREIGN, sqlParser.K_FROM, sqlParser.K_FULL, sqlParser.K_GLOB, sqlParser.K_GROUP, sqlParser.K_HAVING, sqlParser.K_IF, sqlParser.K_IGNORE, sqlParser.K_IMMEDIATE, sqlParser.K_IN, sqlParser.K_INDEX, sqlParser.K_INDEXED, sqlParser.K_INITIALLY, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INSTEAD, sqlParser.K_INTERSECT, sqlParser.K_INTO, sqlParser.K_IS, sqlParser.K_ISNULL, sqlParser.K_JOIN, sqlParser.K_KEY, sqlParser.K_LEFT, sqlParser.K_LIKE, sqlParser.K_LIMIT, sqlParser.K_MATCH, sqlParser.K_NATURAL, sqlParser.K_NO, sqlParser.K_NOT, sqlParser.K_NOTNULL, sqlParser.K_NULL, sqlParser.K_OF, sqlParser.K_OFFSET, sqlParser.K_ON, sqlParser.K_OR, sqlParser.K_ORDER, sqlParser.K_OUTER, sqlParser.K_PLAN, sqlParser.K_PRAGMA, sqlParser.K_PRIMARY, sqlParser.K_QUERY, sqlParser.K_RAISE, sqlParser.K_RECURSIVE, sqlParser.K_REFERENCES, sqlParser.K_REGEXP, sqlParser.K_REINDEX, sqlParser.K_RELEASE, sqlParser.K_RENAME, sqlParser.K_REPLACE, sqlParser.K_RESTRICT, sqlParser.K_RIGHT, sqlParser.K_ROLLBACK, sqlParser.K_ROW, sqlParser.K_SAVEPOINT, sqlParser.K_SELECT, sqlParser.K_SET, sqlParser.K_TABLE, sqlParser.K_TEMP, sqlParser.K_TEMPORARY, sqlParser.K_THEN, sqlParser.K_TO, sqlParser.K_TRANSACTION, sqlParser.K_TRIGGER, sqlParser.K_UNION, sqlParser.K_UNIQUE, sqlParser.K_UPDATE, sqlParser.K_USING, sqlParser.K_VACUUM, sqlParser.K_VALUES, sqlParser.K_VIEW, sqlParser.K_VIRTUAL, sqlParser.K_WHEN, sqlParser.K_WHERE, sqlParser.K_WITH, sqlParser.K_WITHOUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1315
                self.keyword()
                pass
            elif token in [sqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1316
                self.match(sqlParser.STRING_LITERAL)
                pass
            elif token in [sqlParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1317
                self.match(sqlParser.OPEN_PAR)
                self.state = 1318
                self.any_name()
                self.state = 1319
                self.match(sqlParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[9] = self.expr1_sempred
        self._predicates[30] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr1_sempred(self, localctx:Expr1Context, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 5)
         




